/* Level Manager */
class LevelManager {
    static Array tile, map, twoToThe, items;
    static int currentLevel, itemCount;
    static Player player;

    function void init(int levelNumber, Array powArr) {
        let currentLevel = levelNumber;
        let map = Array.new(116);
        let items = Array.new(20);
        let tile = Array.new(16);
        let twoToThe = powArr;
        let itemCount = 0;

        return;
    }

    function void dispose() {
        do map.dispose();
        do items.dispose();
        do tile.dispose();
        return;
    }

    function void setPlayer(Player pl) {
        let player = pl;
        return;
    }

    function Array getItems() {
        return items;
    }

    function Array getMap() {
        return map;
    }

    function Array getTile() {
        return tile;
    }

    function int getItemCount() {
        if (currentLevel = 1) { return LevelOne.getItemCount(); }
        if (currentLevel = 2) { return LevelTwo.getItemCount(); }
        if (currentLevel = 3) { return LevelThree.getItemCount(); }
        if (currentLevel = 4) { return LevelFour.getItemCount(); }
        if (currentLevel = 5) { return LevelFive.getItemCount(); }
        return 0;
    }

    function void loadLevelOne() {
        do LevelOne.init(tile, map, twoToThe, items, player);
        do LevelOne.loadLevel();
        let itemCount = LevelOne.getItemCount();

        return;
    }

    function void loadNextLevel() {
        if (currentLevel = 1) {
            do LevelManager.resetMap();
            do LevelTwo.init(tile, map, twoToThe, items, player);
            do LevelTwo.loadLevel();
        }
        if (currentLevel = 2) {
            do DialogueManager.printDialogueLineOne("Loading next level.");
            do LevelThree.init(tile, map, twoToThe, items, player);
            do LevelThree.loadLevel();
        }
        if (currentLevel = 3) {
            do LevelFour.init(tile, map, twoToThe, items, player);
            do LevelFour.loadLevel();
        }
        if (currentLevel = 4) {
            do LevelFive.init(tile, map, twoToThe, items, player);
            do LevelFive.loadLevel();
        }
        let currentLevel = currentLevel + 1;
        return;
    }

    function void animateTiles() {
        if (currentLevel = 1) {
            do LevelOne.animateTiles();
        }
        if (currentLevel = 2) {
            do LevelTwo.animateTiles();
        }
        if (currentLevel = 3) {
            do LevelThree.animateTiles();
        }
        if (currentLevel = 4) {
            do LevelFour.animateTiles();
        }
        if (currentLevel = 5) {
            do LevelFive.animateTiles();
        }
        return;
    }

    function void processEvents(int key) {
        if (currentLevel = 1) { do LevelOne.processEvents(key); }
        if (currentLevel = 2) { do LevelTwo.processEvents(key); }
        if (currentLevel = 3) { do LevelThree.processEvents(key); }
        if (currentLevel = 4) { do LevelFour.processEvents(key); }
        if (currentLevel = 5) { do LevelFive.processEvents(key); }
        return;
    }

    function void processKeyCollision(Item item) {
        if (currentLevel = 1) { do LevelOne.processKeyCollision(item); }
        if (currentLevel = 2) { do LevelTwo.processKeyCollision(item); }
        if (currentLevel = 3) { do LevelThree.processKeyCollision(item); }
        if (currentLevel = 4) { do LevelFour.processKeyCollision(item); }
        if (currentLevel = 5) { do LevelFive.processKeyCollision(item); }
        return;
    }

    function boolean winCondition() {
        if (currentLevel = 1) {
            return LevelOne.winCondition();
        }
        if (currentLevel = 2) {
            return LevelTwo.winCondition();
        }
        if (currentLevel = 3) {
            return LevelThree.winCondition();
        }
        if (currentLevel = 4) {
            return LevelFour.winCondition();
        }
        if (currentLevel = 5) {
            return LevelFive.winCondition();
        }
        return false;
    }

    function void updateMap(int x, int y) {
        var int index, bit, quot;
        let quot = x / 16;
        let bit = x - (quot * 16);
        let index = quot + (y * 4);

        let map[index] = map[index] | twoToThe[bit];                        // mark tile corner (x, y)
        
        if ((x > 0) & (y > 0)) {
            let map[index - 4] = map[index - 4] | twoToThe[bit];            // mark (x, y - 1)
            let map[index + 4] = map[index + 4] | twoToThe[bit];            // mark (x, y + 1)
            if (bit = 0) {
                let map[index] = map[index] | twoToThe[bit + 1];            // mark (x + 1, y)
                let map[index - 4] = map[index - 4] | twoToThe[bit + 1];    // mark (x + 1, y - 1)
                let map[index + 4] = map[index + 4] | twoToThe[bit + 1];    // mark (x + 1, y + 1)

                let map[index - 1] = map[index - 1] | twoToThe[15];         // mark (x - 1, y)
                let map[index - 5] = map[index - 5] | twoToThe[15];         // mark (x - 1, y - 1)
                let map[index + 3] = map[index + 3] | twoToThe[15];         // mark (x - 1, y + 1)
            }
            else {
            if (bit = 15) {
                let map[index + 1] = map[index + 1] | twoToThe[0];
                let map[index - 3] = map[index - 3] | twoToThe[0];
                let map[index + 5] = map[index + 5] | twoToThe[0];

                let map[index] = map[index] | twoToThe[bit - 1];            // mark (x - 1, y)
                let map[index - 4] = map[index - 4] | twoToThe[bit - 1];    // mark (x - 1, y - 1)
                let map[index + 4] = map[index + 4] | twoToThe[bit - 1];    // mark (x - 1, y + 1)
            } 
            else {
                let map[index] = map[index] | twoToThe[bit + 1];            // mark (x + 1, y)
                let map[index - 4] = map[index - 4] | twoToThe[bit + 1];    // mark (x + 1, y - 1)
                let map[index + 4] = map[index + 4] | twoToThe[bit + 1];    // mark (x + 1, y + 1)

                let map[index] = map[index] | twoToThe[bit - 1];            // mark (x - 1, y)
                let map[index - 4] = map[index - 4] | twoToThe[bit - 1];    // mark (x - 1, y - 1)
                let map[index + 4] = map[index + 4] | twoToThe[bit - 1];    // mark (x - 1, y + 1)
            }
            }
        }
        if (x = 0) {
            let map[index + 4] = map[index + 4] | twoToThe[bit];
            let map[index - 4] = map[index - 4] | twoToThe[bit];
            
            if (bit = 15) {
                let map[index + 1] = map[index + 1] | twoToThe[0];
                let map[index + 5] = map[index + 5] | twoToThe[0];
            }
            else {
                let map[index] = map[index] | twoToThe[bit + 1];
                let map[index + 4] = map[index + 4] | twoToThe[bit + 1];
            }
        }
        if (y = 0) {
            let map[index + 4] = map[index + 4] | twoToThe[bit];
            
            if (bit = 15) {
                let map[index + 1] = map[index + 1] | twoToThe[0];
                let map[index + 5] = map[index + 5] | twoToThe[0];
            }
            else {
                let map[index] = map[index] | twoToThe[bit + 1];
                let map[index + 4] = map[index + 4] | twoToThe[bit + 1];
            }

            if (x > 0) {
                if (bit = 0) {
                    let map[index - 1] = map[index - 1] | twoToThe[15];
                    let map[index + 3] = map[index + 3] | twoToThe[15]; 
                }
                else {
                    let map[index] = map[index] | twoToThe[bit - 1];
                    let map[index + 4] = map[index + 4] | twoToThe[bit - 1];
                }
            }
        }
        
        return;
    }

    function void updateMapBulk(int start, int end, int const, boolean axis) {
        var int i;

        let i = start;

        while (~(i > end)) {
            if (axis) {
                do LevelManager.updateMap(i, const);
            }
            else {
                do LevelManager.updateMap(const, i);
            }
            let i = i + 2;
        }
        return;
    }

    function void unlockMap(int x, int y, boolean axis) {
        var int index, bit, quot;
        let quot = x / 16;
        let bit = x - (quot * 16);
        let index = quot + (y * 4);

        let map[index] = map[index] & (~twoToThe[bit]);

        if (axis) {
            if (bit = 0) {
                let map[index - 1] = map[index - 1] & (~twoToThe[15]);
                let map[index] = map[index] & (~twoToThe[bit + 1]);
            }
            if (bit = 15) {
                let map[index] = map[index] & (~twoToThe[bit - 1]);
                let map[index + 1] = map[index + 1] & (~twoToThe[0]);
            }
            else {
                let map[index] = map[index] & (~(twoToThe[bit + 1] | twoToThe[bit - 1]));
            }
        }
        else {
            let map[index - 4] = map[index - 4] & (~twoToThe[bit]);
            let map[index + 4] = map[index + 4] & (~twoToThe[bit]);
        }
        return;
    }

    function void resetMap() {
        var int i;
        let i = 0;

        while (i < 116) {
            let map[i] = 0;
            let i = i + 1;
        }
        return;
    }
}