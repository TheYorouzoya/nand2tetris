class PatternPuzzle {
    field int x, y, solution, current;
    field Array grid, twoToThe, tile;

    constructor PatternPuzzle new(int Ax, int Ay, Array AtwoToThe) {
        let x = Ax;
        let y = Ay;
        let grid = Array.new(9);
        let tile = Array.new(16);
        let twoToThe = AtwoToThe;

        return this;
    }

    method void dispose() {
        do grid.dispose();
        do tile.dispose();
        do Memory.deAlloc(this);
        return;
    }

    method void loadStageOne() {
        let current = 0;
        let solution = 4;
        
        do setGrid(1, 2, 2, 2, 1, 2, 2, 2, 1);

        do drawPattern(x, y, 1);
        do drawPattern(x + 6, y, 2);
        do drawPattern(x + 12, y, 2);

        do drawPattern(x, y + 6, 2);
        do drawPattern(x + 6, y + 6, 1);
        do drawPattern(x + 12, y + 6, 2);

        do drawPattern(x, y + 12, 2);
        do drawPattern(x + 6, y + 12, 2);
        do drawPattern(x + 12, y + 12, 1);

        do drawPattern(x + 24, y + 6, 4);

        return;
    }

    method void loadStageTwo() {
        let current = 0;
        let solution = 3;

        do setGrid(1, 2, 1, 4, 1, 3, 3, 1, 2);

        do drawPattern(x, y, 1);
        do drawPattern(x + 6, y, 2);
        do drawPattern(x + 12, y, 1);

        do drawPattern(x, y + 6, 4);
        do drawPattern(x + 6, y + 6, 1);
        do drawPattern(x + 12, y + 6, 3);

        do drawPattern(x, y + 12, 3);
        do drawPattern(x + 6, y + 12, 1);
        do drawPattern(x + 12, y + 12, 2);

        do drawPattern(x + 24, y + 6, 3);

        return;
    }

        method void loadStageThree() {
        let current = 0;
        let solution = 1;

        do setGrid(4, 4, 4, 2, 2, 4, 2, 4, 4);

        do drawPattern(x, y, 4);
        do drawPattern(x + 6, y, 4);
        do drawPattern(x + 12, y, 4);

        do drawPattern(x, y + 6, 2);
        do drawPattern(x + 6, y + 6, 2);
        do drawPattern(x + 12, y + 6, 4);

        do drawPattern(x, y + 12, 2);
        do drawPattern(x + 6, y + 12, 4);
        do drawPattern(x + 12, y + 12, 4);

        do drawPattern(x + 24, y + 6, 1);

        return;
    }

    method void setGrid(int v1, int v2, int v3, int v4, int v5, int v6, int v7, int v8, int v9) {
        let grid[0] = v1;
        let grid[1] = v2;
        let grid[2] = v3;
        let grid[3] = v4;
        let grid[4] = v5;
        let grid[5] = v6;
        let grid[6] = v7;
        let grid[7] = v8;
        let grid[8] = v9;
        return;
    }

    method boolean isSolved() {
        return (current = 511);
    }

    method void flipPatterns(int key) {
        var int row, col;
        var int newKey;
        let newKey = key;

        if (key < 3) {
            let newKey = key + 6;
        }
        if (key > 5) {
            let newKey = key - 6;
        }

        let row = newKey / 3;
        let col = newKey - (row * 3);

        do flipPattern(0, row);
        do flipPattern(1, row);
        do flipPattern(2, row);
        do flipPattern(col, 0);
        do flipPattern(col, 1);
        do flipPattern(col, 2);

        do rollBack(col, row);

        return;
    }

    method void flipPattern(int pX, int pY) {
        var int index;
        let index = pX + (3 * pY);
        let grid[index] = grid[index] + 1;
        if (grid[index] = 5) {
            let grid[index] = 1;
        }
        
        if (grid[index] = solution) {
            let current = current | twoToThe[index];
        }
        else {
            let current = current & (~twoToThe[index]);
        }

        do drawPattern(x + (6 * pX), y + (6 * pY), grid[index]);
        
        return;
    }

    method void rollBack(int pX, int pY) {
        var int index;
        let index = pX + (3 * pY);
        let grid[index] = grid[index] - 1;
        if (grid[index] = 0) {
            let grid[index] = 4;
        }

        if (grid[index] = solution) {
            let current = current | twoToThe[index];
        }
        else {
            let current = current & (~twoToThe[index]);
        }

        do drawPattern(x + (6 * pX), y + (6 * pY), grid[index]);
        return;
    }

    method void drawPattern(int pX, int pY, int pattern) {
        do GeneratorTiles.loadPatternTile(tile, pattern);

        do Tiles.drawTile(pX, pY, tile);
        do Tiles.drawTile(pX + 2, pY, tile);
        do Tiles.drawTile(pX, pY + 2, tile);
        do Tiles.drawTile(pX + 2, pY + 2, tile);
        return;
    }
}