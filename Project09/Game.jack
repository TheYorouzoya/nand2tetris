/* Game engine */
class Game {
    field Player player;
    field int direction, slowBit, itemCount;
    field Array twoToThe, items;

    constructor Game new() {
        let twoToThe = Array.new(16);
        let twoToThe[0] = 1;
        let twoToThe[1] = 2;
        let twoToThe[2] = 4;
        let twoToThe[3] = 8;
        let twoToThe[4] = 16;
        let twoToThe[5] = 32;
        let twoToThe[6] = 64;
        let twoToThe[7] = 128;
        let twoToThe[8] = 256;
        let twoToThe[9] = 512;
        let twoToThe[10] = 1024;
        let twoToThe[11] = 2048;
        let twoToThe[12] = 4096;
        let twoToThe[13] = 8192;
        let twoToThe[14] = 16384;
        let twoToThe[15] = 32767 + 1;
        let slowBit = 0;

        do Tiles.init();
        do LevelManager.init(1, twoToThe);
        do DialogueManager.init();
        let player = Player.new(0, 0, twoToThe, LevelManager.getMap());
        let direction = 0;
        do LevelManager.setPlayer(player);
        let items = LevelManager.getItems();
        return this;
    }

    method void dispose() {
        do player.dispose();
        do LevelManager.dispose();
        do twoToThe.dispose();
        do Memory.deAlloc(this);
        return;
    }

    method void run() {
        var char key;
        var boolean exit;

        let exit = false;

        do blackScreen();
        do LevelManager.loadLevelOne();
        let itemCount = LevelManager.getItemCount();
        do player.draw();
        do DialogueManager.drawUI();

        while (~exit) {
            let key = Keyboard.keyPressed();
            let direction = 0;
            if (key = 131) { let direction = 1; }   // up arrow
            if (key = 133) { let direction = 2; }   // down arrow
            if (key = 130) { let direction = 3; }   // left arrow
            if (key = 132) { let direction = 4; }   // right arrow
            do movePlayer();
            if (slowBit = 0) {
                do moveItems();
            }
            do animateItems();
            do detectCollisions(player.getX(), player.getY());
            if (LevelManager.winCondition()) {
                do blackScreen();
                do LevelManager.loadNextLevel();
                let itemCount = LevelManager.getItemCount();
                do player.draw();
            }
            do Sys.wait(100);
            let slowBit = ~slowBit;
        }
        return;
    }

    method void movePlayer() {
        if (direction = 1) { do player.moveUp(); }
        if (direction = 2) { do player.moveDown(); }
        if (direction = 3) { do player.moveLeft(); }
        if (direction = 4) { do player.moveRight(); }
        return;
    }

    method void moveItems() {
        var int i;
        var Item item;

        let i = 0;
        while (i < itemCount) {
            let item = items[i];
            do item.moveItem();
            let i = i + 1;
        }
        return;
    }

    method void animateItems() {
        var int i;
        var Item item;

        let i = 0;
        while (i < itemCount) {
            let item = items[i];
            if (item.isAnimated()) {
                do item.draw();
            }
            let i = i + 1;
        }
        return;
    }

    method void detectCollisions(int x, int y) {
        var int i;
        var Item item;

        let i = 0;
        while (i < itemCount) {
            let item = items[i];
            if(item.collidesWith(x, y)) {
                do processCollision(item);
                do item.dispose();
                let items[i] = items[itemCount - 1];
                let itemCount = itemCount - 1;
            }
            let i = i + 1;
        }
        return;
    }

    method void processCollision(Item item) {
        do Tiles.eraseTile(item.getX(), item.getY());
        do player.draw();
        if (item.getType() = 1) {
            do player.setKey(true);
            do LevelManager.processKeyCollision();
        }
        return;
    }

    method void blackScreen() {
        var Array screen;
        var int index;

        let screen = 16384;
        let index = 0;

        while (index < 6656) {
            let screen[index] = -1;
            let index = index + 1;
        }
        return;
    }

}