class Golem {
    field int x, y;
    field int direction, path, distanceTraveled;
    field Array tile;
    field Array fireballs;
    field boolean running;

    constructor Golem new(int Ax, int Ay, int dir, int pth) {
        let x = Ax;
        let y = Ay;
        let tile = Array.new(16);
        let direction = dir;
        let path = pth;
        let distanceTraveled = 0;
        let fireballs = Array.new(3);
        let running = true;

        return this;
    }

    method boolean isRunning() {
        return running;
    }

    method void stopRunning() {
        let running = false;
        return;
    }

    method void draw() {
        var int i, j;

        let i = 0;

        while (i < 3) {
            let j = 0;
            while (j < 3) {
                do Tiles.eraseTile(x + (j * 2), y + (i * 2));
                do loadTile((i * 3) + j + 1);
                do Tiles.drawTile(x + (j * 2), y + (i * 2), tile);
                let j = j + 1;
            }
            let i = i + 1;
        }

        return;
    }

    method void erase() {
        var int i, j;

        let i = 0;

        while (i < 3) {
            let j = 0;
            while (j < 3) {
                do Tiles.eraseTile(x + (j * 2), y + (i * 2));
                let j = j + 1;
            }
            let i = i + 1;
        }
        return;
    }

    method boolean collidesWith(int Ax, int Ay) {
        var boolean result;

        let result = ((x        < (Ax + 2)) &
                     ((x + 6)   > Ax)       &
                     (y         < (Ay + 2)) &
                     ((y + 6)   > Ay));

        return result;
    }

    method void move() {
        if (direction = 1) { do moveUp(); }
        if (direction = 2) { do moveDown(); }
        return;
    }

    method void moveUp() {
        do erase();
        let y = y - 1;
        let distanceTraveled = distanceTraveled + 1;
        do draw();

        if (distanceTraveled = path) {
            let distanceTraveled = 0;
            let direction = 2;
        }
        return;
    }

    method void moveDown() {
        do erase();
        let y = y + 1;
        let distanceTraveled = distanceTraveled + 1;
        do draw();

        if (distanceTraveled = path) {
            let distanceTraveled = 0;
            let direction = 1;
        }
        return;
    }


    method void loadTile(int tileId) {
        if (tileId = 1) {
            let tile[0] = -1;
            let tile[1] = -1;
            let tile[2] = -1;
            let tile[3] = -1;
            let tile[4] = -1;
            let tile[5] = -1;
            let tile[6] = -1;
            let tile[7] = -1;
            let tile[8] = -1;
            let tile[9] = -1;
            let tile[10] = -1;
            let tile[11] = -3073;
            let tile[12] = -4705;
            let tile[13] = -29009;
            let tile[14] = 18095;
            let tile[15] = -32081;
        }
        if (tileId = 2) {
            let tile[0] = -1;
            let tile[1] = -97;
            let tile[2] = -241;
            let tile[3] = -441;
            let tile[4] = -985;
            let tile[5] = -2029;
            let tile[6] = -4079;
            let tile[7] = -4080;
            let tile[8] = -4040;
            let tile[9] = -4028;
            let tile[10] = -4028;
            let tile[11] = -8124;
            let tile[12] = -31688;
            let tile[13] = 1040;
            let tile[14] = 1041;
            let tile[15] = 1042;
        }
        if (tileId = 3) {
            let tile[0] = -1;
            let tile[1] = -1;
            let tile[2] = -1;
            let tile[3] = -1;
            let tile[4] = -1;
            let tile[5] = -1;
            let tile[6] = -1;
            let tile[7] = -1;
            let tile[8] = -1;
            let tile[9] = -1;
            let tile[10] = -1;
            let tile[11] = -8;
            let tile[12] = -394;
            let tile[13] = -652;
            let tile[14] = -1176;
            let tile[15] = -1456;
        }
        if (tileId = 4) {
            let tile[0] = 4423;
            let tile[1] = 4231;
            let tile[2] = 4227;
            let tile[3] = 4227;
            let tile[4] = 4227;
            let tile[5] = 10369;
            let tile[6] = 26753;
            let tile[7] = -5823;
            let tile[8] = 9505;
            let tile[9] = 784;
            let tile[10] = 8460;
            let tile[11] = 12802;
            let tile[12] = 30976;
            let tile[13] = 30978;
            let tile[14] = -1916;
            let tile[15] = -1927;
        }
        if (tileId = 5) {
            let tile[0] = 3588;
            let tile[1] = 4872;
            let tile[2] = 4816;
            let tile[3] = 4704;
            let tile[4] = 4752;
            let tile[5] = 4368;
            let tile[6] = 4624;
            let tile[7] = 5139;
            let tile[8] = 2076;
            let tile[9] = -28620;
            let tile[10] = 24644;
            let tile[11] = 7304;
            let tile[12] = 904;
            let tile[13] = -31672;
            let tile[14] = 17465;
            let tile[15] = 17417;
        }
        if (tileId = 6) {
            let tile[0] = -4030;
            let tile[1] = -4030;
            let tile[2] = -3966;
            let tile[3] = -8062;
            let tile[4] = -8062;
            let tile[5] = -8058;
            let tile[6] = -16052;
            let tile[7] = -15798;
            let tile[8] = -27607;
            let tile[9] = -30703;
            let tile[10] = 1554;
            let tile[11] = 262;
            let tile[12] = 1182;
            let tile[13] = 1118;
            let tile[14] = 1055;
            let tile[15] = 543;
        }
        if (tileId = 7) {
            let tile[0] = -1935;
            let tile[1] = -1651;
            let tile[2] = -1005;
            let tile[3] = -1005;
            let tile[4] = -621;
            let tile[5] = -2031;
            let tile[6] = -1534;
            let tile[7] = -1366;
            let tile[8] = -595;
            let tile[9] = -81;
            let tile[10] = -33;
            let tile[11] = -1;
            let tile[12] = -1;
            let tile[13] = -1;
            let tile[14] = -1;
            let tile[15] = -1;
        }
        if (tileId = 8) {
            let tile[0] = -32755;
            let tile[1] = 8305;
            let tile[2] = 8578;
            let tile[3] = 8708;
            let tile[4] = 5128;
            let tile[5] = 14345;
            let tile[6] = 2065;
            let tile[7] = -30671;
            let tile[8] = -15287;
            let tile[9] = -15805;
            let tile[10] = -7769;
            let tile[11] = -4017;
            let tile[12] = -1953;
            let tile[13] = -961;
            let tile[14] = -385;
            let tile[15] = -1;
        }
        if (tileId = 9) {
            let tile[0] = 95;
            let tile[1] = -24481;
            let tile[2] = -26466;
            let tile[3] = -30946;
            let tile[4] = -29634;
            let tile[5] = -12226;
            let tile[6] = -16321;
            let tile[7] = -32577;
            let tile[8] = 24927;
            let tile[9] = 20831;
            let tile[10] = 21951;
            let tile[11] = -18945;
            let tile[12] = -1025;
            let tile[13] = -1;
            let tile[14] = -1;
            let tile[15] = -1;
        }
        return;
    }
}