class Golem {
    field int x, y;
    field int direction, path, distanceTraveled, counter;
    field Array tile;
    field Array fireballs;
    field boolean running;

    constructor Golem new(int Ax, int Ay, int dir, int pth) {
        let x = Ax;
        let y = Ay;
        let tile = Array.new(16);
        let direction = dir;
        let path = pth;
        let distanceTraveled = 0;
        let fireballs = Array.new(5);
        let fireballs[0] = Item.new(x - 2, y, 7, 3, 0, 3, false, 1);
        let fireballs[1] = Item.new(x - 2, y + 2, 7, 3, 0, 3, false, 1);
        let fireballs[2] = Item.new(x - 2, y + 4, 7, 3, 0, 3, false, 1);
        let fireballs[3] = Item.new(x - 2, y + 4, 7, 3, 0, 3, false, 1);
        let fireballs[4] = Item.new(x - 2, y + 4, 7, 3, 0, 3, false, 1);
        let running = true;
        let counter = 0;

        return this;
    }

    method void tick(int playerX, int playerY, Player player) {
        var int i;
        var Item fireball;
        let i = 0;

        do move();
        
        while(i < 5) {
            let fireball = fireballs[i];
            if (fireball.isActive()) {
                do fireball.moveLeft();
                if (fireball.collidesWith(playerX, playerY)) {
                    do player.takeDamage();
                    do fireball.erase();
                    do fireball.setActive(false);
                    do player.respawn();
                }
                if (fireball.getX() < 2) {
                    do fireball.erase();
                    do fireball.setActive(false);
                }
            } 
            if (~(fireball.isActive()) & (counter > 16)) {
                if ((y < (playerY + 2)) & ((y + 6) > playerY)) {
                    do fireball.setPosition(x - 2, playerY);
                    do fireball.setActive(true);
                    let counter = 0;
                }
            }
            if (collidesWith(playerX, playerY)) {
                do player.takeDamage();
                do player.respawn();
            }
            let i = i + 1;
            let counter = counter + 1;
        }
        return;
    }

    method boolean isRunning() {
        return running;
    }

    method void stop() {
        var Item fireball;
        var int i;

        let i = 0;

        while (i < 5) {
            let fireball = fireballs[i];
            do fireball.erase();
            do fireball.setActive(false);
            let i = i + 1;
        }
        let running = false;
        return;
    }

    method void draw() {
        var int i, j;

        let i = 0;

        while (i < 3) {
            let j = 0;
            while (j < 3) {
                do Tiles.eraseTile(x + (j * 2), y + (i * 2));
                do loadTile((i * 3) + j + 1);
                do Tiles.drawTile(x + (j * 2), y + (i * 2), tile);
                let j = j + 1;
            }
            let i = i + 1;
        }

        return;
    }

    method void erase() {
        var int i, j;

        let i = 0;

        while (i < 3) {
            let j = 0;
            while (j < 3) {
                do Tiles.eraseTile(x + (j * 2), y + (i * 2));
                let j = j + 1;
            }
            let i = i + 1;
        }
        return;
    }

    method boolean collidesWith(int Ax, int Ay) {
        var boolean result;

        let result = ((x        < (Ax + 2)) &
                     ((x + 6)   > Ax)       &
                     (y         < (Ay + 2)) &
                     ((y + 6)   > Ay));

        return result;
    }

    method void move() {
        if (direction = 1) { do moveUp(); }
        if (direction = 2) { do moveDown(); }
        return;
    }

    method void moveUp() {
        do erase();
        let y = y - 1;
        let distanceTraveled = distanceTraveled + 1;
        do draw();

        if (distanceTraveled = path) {
            let distanceTraveled = 0;
            let direction = 2;
        }
        return;
    }

    method void moveDown() {
        do erase();
        let y = y + 1;
        let distanceTraveled = distanceTraveled + 1;
        do draw();

        if (distanceTraveled = path) {
            let distanceTraveled = 0;
            let direction = 1;
        }
        return;
    }


    method void loadTile(int tileId) {
        if (tileId = 1) {
            do Tiles.loadTile(tile, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
                                -3073, -4705, -29009, 18095, -32081);
        }
        if (tileId = 2) {
            do Tiles.loadTile(tile, -1, -97, -241, -441, -985, -2029, -4079, -4080, 
                                -4040, -4028, -4028, -8124, -31688, 1040, 1041, 1042);
        }
        if (tileId = 3) {
            do Tiles.loadTile(tile, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
                                -8, -394, -652, -1176, -1456);
        }
        if (tileId = 4) {
            do Tiles.loadTile(tile, 4423, 4231, 4227, 4227, 4227, 10369, 26753, 
                                    -5823, 9505, 784, 8460, 12802, 30976, 30978, 
                                    -1916, -1927);
        }
        if (tileId = 5) {
            do Tiles.loadTile(tile, 3588, 4872, 4816, 4704, 4752, 4368, 4624, 5139, 
                                2076, -28620, 24644, 7304, 904, -31672, 17465, 17417);
        }
        if (tileId = 6) {
            do Tiles.loadTile(tile, -4030, -4030, -3966, -8062, -8062, -8058, -16052, 
                                -15798, -27607, -30703, 1554, 262, 1182, 1118, 1055, 543);
        }
        if (tileId = 7) {
            do Tiles.loadTile(tile, -1935, -1651, -1005, -1005, -621, -2031, -1534, 
                                -1366, -595, -81, -33, -1, -1, -1, -1, -1);
        }
        if (tileId = 8) {
            do Tiles.loadTile(tile, -32755, 8305, 8578, 8708, 5128, 14345, 2065, 
                                -30671, -15287, -15805, -7769, -4017, -1953, -961, 
                                -385, -1);
        }
        if (tileId = 9) {
            do Tiles.loadTile(tile, 95, -24481, -26466, -30946, -29634, -12226, 
                                -16321, -32577, 24927, 20831, 21951, -18945, -1025, 
                                -1, -1, -1);
        }
        return;
    }
}