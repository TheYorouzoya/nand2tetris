/* Class to manage the items and other collectibles in the game */

class Item {

    /* Item "id" refers to the different items' unique ID. This is used to load
       a particular tile from the Tiles module.

       Item "type" refers to the kind of an item based on how it interacts with
       the player character. The interactions are mapped as follows:
            0 : Non-interactive item
            1 : Key Item (opens doors, chests, etc.)
            2 : Healing Item (heals the player)
            3 : Damaging Item (damages the player) */
    field int type, id;


    /*  "x", "y", and "direction" refer to the item's (x,y) position on the screen
        grid and the movement direction. Movement mapping:
            0 : Stationary
            1 : Up
            2 : Down
            3 : Left
            4 : Right */
    field int x, y, direction;


    /*  Item movement is defined together with three quantities: "direction", "path",
        and "distanceTraveled". "direction" defines the direction to move toward,
        "path" defines how many units to move, and "distanceTraveled" keeps track of
        the number of units moved so far.
        Once an item reaches the destination, the "direction" is reversed and
        "distanceTraveled" starts incrementing again from 0. This way, an item
        moves back and forth between two points. */
    field int path, distanceTraveled;


    /* The tile array stores the 16x16 bitmap for the item's image. */
    field Array tile;


    /* "animated", "frames" and "currentFrame" store whether the tile is animated,
        how many frames it has in one animation loop, and the current frame number
        respectively. */
    field boolean animated;
    field int frames, currentFrame;

    field boolean active;

    constructor Item new(int Ax, int Ay, int Aid, int dir, int pth, int Atyp, boolean anim, int animationOffset) {
        let x = Ax;
        let y = Ay;
        let id = Aid;
        let type = Atyp;
        let animated = anim;
        let tile = Array.new(16);
        let direction = dir;
        let path = pth;
        let distanceTraveled = 0;
        let active = false;

        do loadAnimationData(animationOffset);
        do Tiles.loadBlankTile(tile);
        do loadTile();

        if (~(type = 3)) {
            do draw();
        }
        
        return this;
    }

    method void dispose() {
        do tile.dispose();
        do Memory.deAlloc(this);
        return;
    }


    /* loads an item's animation parameters based on ID */
    method void loadAnimationData(int offset) {
        if (id = 3) {
            let frames = 30;
        }
        if (id = 4) {
            let frames = 30;
        }
        if (id = 5) {
            let frames = 4;
        }
        let currentFrame = offset;
        return;
    }


    /* loads a particular tile/ tile frame from the tiles module based on the
       item's ID */
    method void loadTile() {
        //if (id = 1) { do Tiles.loadKeyTile(tile); }
        //if (id = 3) { do Tiles.loadSpike(tile, currentFrame); }
        if (id = 4) { do Tiles.loadSpikeTwo(tile, currentFrame); }
        if (id = 5) { do Tiles.loadSmallFan(tile, currentFrame); }
        if (id = 6) { do GeneratorTiles.loadEnergyOrb(tile); }
        if (id = 7) { do Skull.loadFireball(tile, direction); }
        if (id = 8) { do Tiles.loadHeartTile(tile); }
        if (id = 9) { do Tiles.loadDoorKeeper(tile); }
        if (id = 10) { do Tiles.loadEngineer(tile); }
        return;
    }

    /* Draws the item on the screen. If the item is animated, draw the next frame
       in the animation loop */
    method void draw() {
        if (animated) {
            do Tiles.eraseTile(x, y);
            let currentFrame = currentFrame + 1;
            do loadTile();
            if (currentFrame = frames) {
                let currentFrame = 0;
            }
        }
        do Tiles.drawTile(x, y, tile);
        return;
    }

    method void erase() {
        do Tiles.eraseTile(x, y);
        return;
    }

    /* Detect whether the item collides with another item at the given (x, y) location */
    method boolean collidesWith(int Ax, int Ay) {
        var boolean result;
        let result = ((x       < (Ax + 2)) &
                     ((x + 2)  >  Ax)      &
                     (y        < (Ay + 2)) &
                     ((y + 2)  >  Ay));
        
        return result;
    }

    method void moveItem() {
        if (direction = 1) { do moveUp(); }
        if (direction = 2) { do moveDown(); }
        if (direction = 3) { do moveLeft(); }
        if (direction = 4) { do moveRight(); }
        return;
    }

    method void moveUp() {
        do Tiles.eraseTile(x, y);
        let y = y - 1;
        let distanceTraveled = distanceTraveled + 1;
        do Tiles.drawTile(x, y, tile);

        if (distanceTraveled = path) {
            let distanceTraveled = 0;
            let direction = 2;
        }
        return;
    }
    
    method void moveDown() {
        do Tiles.eraseTile(x, y);
        let y = y + 1;
        let distanceTraveled = distanceTraveled + 1;
        do Tiles.drawTile(x, y, tile);

        if (distanceTraveled = path) {
            let distanceTraveled = 0;
            let direction = 1;
        }
        return;
    }
    
    method void moveLeft() {
        do Tiles.eraseTile(x, y);
        let x = x - 1;
        let distanceTraveled = distanceTraveled + 1;
        do Tiles.drawTile(x, y, tile);

        if (distanceTraveled = path) {
            let distanceTraveled = 0;
            let direction = 4;
        }
        return;
    }
    
    method void moveRight() {
        do Tiles.eraseTile(x, y);
        let x = x + 1;
        let distanceTraveled = distanceTraveled + 1;
        do Tiles.drawTile(x, y, tile);

        if (distanceTraveled = path) {
            let distanceTraveled = 0;
            let direction = 3;
        }
        return;
    }

    method int getX() {
        return x;
    }

    method void setPosition(int newX, int newY) {
        let x = newX;
        let y = newY;
        return;
    }

    method int getY() {
        return y;
    }

    method int getType() {
        return type;
    }

    method int getDirection() {
        return direction;
    }

    method boolean isAnimated() {
        return animated;
    }

    method void setActive(boolean value) {
        let active = value;
        return;
    }

    method boolean isActive() {
        if ((id = 4) & (currentFrame > 12)) {
            return false;
        }
        if ((id = 3) & (currentFrame > 10)) {
            return false;
        }
        if (id = 7) {
            return active;
        }
        return true;
    }

    method void setAnimated(boolean value) {
        let animated = value;
        return;
    }

    method Array getTile() {
        return tile;
    }
}