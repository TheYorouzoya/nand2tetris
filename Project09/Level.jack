/* Level Manager */
class Level {
    field Array tile, map, twoToThe, items;
    field int currentLevel, itemCount;
    field Player player;

    constructor Level new(int levelNumber, Array powArr) {
        let currentLevel = levelNumber;
        let map = Array.new(128);
        let items = Array.new(5);
        let tile = Array.new(16);
        let twoToThe = powArr;
        let itemCount = 0;

        do setLevelOne();
        return this;
    }

    method void dispose() {
        do map.dispose();
        do items.dispose();
        do tile.dispose();
        do Memory.deAlloc(this);
        return;
    }

    method void setPlayer(Player pl) {
        let player = pl;
        return;
    }

    method Array getMap() {
        return map;
    }

    method void setLevelOne() {
        let itemCount = 0;

        do Tiles.loadBrickTile(tile);
        do drawTiles(35, 53, 16, true, true);
        do drawTiles(18, 24, 35, true, false);
        do drawTiles(18, 24, 53, true, false);
        do drawTiles(37, 51, 24, true, true);

        do Tiles.loadClosedDoorTile(tile);
        do Tiles.eraseTile(47, 24);
        do Tiles.drawTile(47, 24, tile);
        
        let items[itemCount] = Item.new(26, 16, 1, 0, 0);
        let itemCount = itemCount + 1;
        do updateMap(26, 16);

        let items[itemCount] = Item.new(20, 16, 1, 1, 9);
        let itemCount = itemCount + 1;
        
        return;
    }

    method void drawTiles(int r1, int r2, int ax, boolean flag, boolean axis) {
        var int i;
        let i = r1;

        while (~(r2 < i)) {
            if (axis) {
                do Tiles.drawTile(i, ax, tile);
                if (flag) {
                    do updateMap(i, ax);
                }
            }
            else {
                do Tiles.drawTile(ax, i, tile);
                if (flag) {
                    do updateMap(ax, i);
                }
            }

            let i = i + 2;
        }
        return;
    }

    method void moveItems() {
        var int i;
        var Item item;

        let i = 0;
        while (i < itemCount) {
            let item = items[i];
            do item.moveItem();
            let i = i + 1;
        }
        return;
    }

    method void detectCollisions(int x, int y) {
        var int i;
        var Item item;

        let i = 0;
        while (i < itemCount) {
            let item = items[i];
            if(item.collidesWith(x, y)) {
                do processCollision(item);
                do item.dispose();
                let items[i] = items[itemCount - 1];
                let itemCount = itemCount - 1;
            }
            let i = i + 1;
        }
        return;
    }

    method void processCollision(Item item) {
        do Tiles.eraseTile(item.getX(), item.getY());
        do player.draw();
        if (item.getType() = 1) {
            do Tiles.loadOpenDoorTile(tile);
            do Tiles.eraseTile(47, 24);
            do Tiles.drawTile(47, 24, tile);
        }
        return;
    }

    method void updateMap(int x, int y) {
        var int index, bit, quot;
        let quot = x / 16;
        let bit = x - (quot * 16);
        let index = quot + (y * 4);

        let map[index] = map[index] | twoToThe[bit];                        // mark tile corner (x, y)
        
        if ((x > 0) & (y > 0)) {
            let map[index - 4] = map[index - 4] | twoToThe[bit];            // mark (x, y - 1)
            let map[index + 4] = map[index + 4] | twoToThe[bit];            // mark (x, y + 1)
            if (bit = 0) {
                let map[index] = map[index] | twoToThe[bit + 1];            // mark (x + 1, y)
                let map[index - 4] = map[index - 4] | twoToThe[bit + 1];    // mark (x + 1, y - 1)
                let map[index + 4] = map[index + 4] | twoToThe[bit + 1];    // mark (x + 1, y + 1)

                let map[index - 1] = map[index - 1] | twoToThe[15];         // mark (x - 1, y)
                let map[index - 5] = map[index - 5] | twoToThe[15];         // mark (x - 1, y - 1)
                let map[index + 3] = map[index + 3] | twoToThe[15];         // mark (x - 1, y + 1)
            }
            else {
            if (bit = 15) {
                let map[index + 1] = map[index + 1] | twoToThe[0];
                let map[index - 3] = map[index - 3] | twoToThe[0];
                let map[index + 5] = map[index + 5] | twoToThe[0];

                let map[index] = map[index] | twoToThe[bit - 1];            // mark (x - 1, y)
                let map[index - 4] = map[index - 4] | twoToThe[bit - 1];    // mark (x - 1, y - 1)
                let map[index + 4] = map[index + 4] | twoToThe[bit - 1];    // mark (x - 1, y + 1)
            } else {
                let map[index] = map[index] | twoToThe[bit + 1];            // mark (x + 1, y)
                let map[index - 4] = map[index - 4] | twoToThe[bit + 1];    // mark (x + 1, y - 1)
                let map[index + 4] = map[index + 4] | twoToThe[bit + 1];    // mark (x + 1, y + 1)

                let map[index] = map[index] | twoToThe[bit - 1];            // mark (x - 1, y)
                let map[index - 4] = map[index - 4] | twoToThe[bit - 1];    // mark (x - 1, y - 1)
                let map[index + 4] = map[index + 4] | twoToThe[bit - 1];    // mark (x - 1, y + 1)
            }
            }
        }
        
        return;
    }
}