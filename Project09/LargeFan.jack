/* A large 2x2 fan with animation data */
class LargeFan {
    field int x, y, frame;
    field boolean animated;
    field Array tileA, tileB, tileC, tileD;

    constructor LargeFan new(int Ax, int Ay, boolean anim) {
        let x = Ax;
        let y = Ay;
        let tileA = Array.new(16);
        let tileB = Array.new(16);
        let tileC = Array.new(16);
        let tileD = Array.new(16);

        let animated = anim;
        let frame = 1;

        do loadFanTile(tileA, 1);
        do loadFanTile(tileB, 2);
        do loadFanTile(tileC, 3);
        do loadFanTile(tileD, 4);
        return this;
    }

    method void dispose() {
        do tileA.dispose();
        do tileB.dispose();
        do tileC.dispose();
        do tileD.dispose();
        do Memory.deAlloc(this);

        return;
    }

    method void draw() {
        if (animated) {
            do Tiles.eraseTile(x, y);
            do Tiles.eraseTile(x + 2, y);
            do Tiles.eraseTile(x, y + 2);
            do Tiles.eraseTile(x + 2, y + 2);

            let frame = frame + 1;
            do loadFanTile(tileA, 1);
            do loadFanTile(tileB, 2);
            do loadFanTile(tileC, 3);
            do loadFanTile(tileD, 4);

            if (frame = 4) {
                let frame = 0;
            }
        }
        do Tiles.drawTile(x, y, tileA);
        do Tiles.drawTile(x + 2, y, tileB);
        do Tiles.drawTile(x, y + 2, tileC);
        do Tiles.drawTile(x + 2, y + 2, tileD);
        return;
    }

    method void setAnimated(boolean value) {
        let animated = value;
        return;
    }

    method void loadFanTile(Array tile, int tileId) {
        if (tileId = 1) {
            if (frame = 1) {
                do Tiles.loadTile(tile, -1, -1, 4095, -3609, 3687, -3649, 7775, 
                                    1967, 8111, 8151, 16343, 16343, 32555, 31787, 
                                    -2043, 16427);
            }
            if (frame = 3) {
                do Tiles.loadTile(tile, -1, -1, 4095, -3609, 3687, -3649, -417, 
                                    -3665, -8017, -8105, -16297, -16297, -16149,
                                    -31765, -24597, 32747);
            }
        }
        if (tileId = 2) {
            if (frame = 1) {
                do Tiles.loadTile(tile, -1, -1, -16, -6257, -6544, -625, -1424, 
                                    -2576, -2568, -5128, -5124, -5380, -10498, 
                                    -11202, -11251, -11262);
            }
            if (frame = 3) {
                do Tiles.loadTile(tile, -1, -1, -16, -6257, -6544, -625, -1409, 
                                    -2673, -2809, -5625, -5629, -5629, -10493, 
                                    -10303, -10247, -10242);
            }
        }
        if (tileId = 3) {
            if (frame = 1) {
                do Tiles.loadTile(tile, 16427, -20437, 31787, 32619, 16215, 16343, 
                                    8151, 8111, 4015, 3679, -3649, 3687, -3609, 
                                    4095, -1, -1);
            }
            if (frame = 3) {
                do Tiles.loadTile(tile, 32747, -24597, -31765, -16149, -16297, 
                                    -16297, -8105, -8017, -3665, -417, -3649, 3687, 
                                    -3609, 4095, -1, -1);
            }
        }
        if (tileId = 4) {
            if (frame = 1) {
                do Tiles.loadTile(tile, -11262, -11251, -11202, -11010, -5124, 
                                    -5124, -5128, -2568, -2592, -1416, -625, -6544, 
                                    -6257, -16, -1, -1);
            }
            if (frame = 3) {
                do Tiles.loadTile(tile, -10242, -10247, -10303, -10493, -5629, -5629, 
                                    -5625, -2809, -2673, -1409, -625, -6544, -6257, 
                                    -16, -1, -1);
            }
        }
        return;
    }
}