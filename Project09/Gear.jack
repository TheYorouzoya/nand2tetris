/* A 1x1 small gear or a 2x1 large gear. Unused orientations' drawing data was removed 
   to save instruction space, so it currently only supports orientations which
   are currently in use by the levels. Is animated. */
class Gear {
    field int x, y, x2, y2, orientation, frame, type;
    field boolean animated;
    field Array tileA, tileB;

    constructor Gear new(int Ax, int Ay, int Aor, int Atyp, boolean anim) {
        let x = Ax;
        let y = Ay;
        let orientation = Aor;
        let type = Atyp;
        let tileA = Array.new(16);
        if (type = 1) {
            let tileB = Array.new(16);
            do initializeGear();
            do loadLargeGearLeft(tileA);
            do loadLargeGearRight(tileB);
        }
        else {
            do loadSmallGear(tileA);
        }
        let animated = anim;
        let frame = 1;
        
        return this;
    }

    method void dispose() {
        do tileA.dispose();
        if (type = 1) {
            do tileB.dispose();
        }
        do Memory.deAlloc(this);
        return;
    }

    method void initializeGear() {
        if (orientation = 1) {
            let x2 = x + 2;
            let y2 = y;
        }
        if (orientation = 2) {
            let x2 = x;
            let y2 = y + 2;
        }
        if (orientation = 3) {
            let x2 = x - 2;
            let y2 = y;
        }
        if (orientation = 4) {
            let x2 = x;
            let y2 = y - 2;
        }
        return;
    }

    method void draw() {
        if (type = 1) {
            do drawLargeGear();
        }
        else {
            do drawSmallGear();
        }
        return;
    }

    method void setAnimated(boolean value) {
        let animated = value;
        return;
    }

    method void drawLargeGear() {
        if (animated) {
            let frame = frame + 1;
        }

        do Tiles.eraseTile(x, y);
        do Tiles.eraseTile(x2, y2);

        do loadLargeGearLeft(tileA);
        do Tiles.drawTile(x, y, tileA);

        do loadLargeGearRight(tileB);
        do Tiles.drawTile(x2, y2, tileB);
        
        if (frame = 4) {
            let frame = 0;
        }

        return;
    }

    method void drawSmallGear() {
        if (animated) {
            let frame = frame + 1;
        }
        do Tiles.eraseTile(x, y);
        do loadSmallGear(tileA);
        do Tiles.drawTile(x, y, tileA);
        if (frame = 4) {
            let frame = 0;
        }
        return;
    }

    method void loadLargeGearLeft(Array tile) {
        if (orientation = 1) {
            if (frame = 1) {
                do Tiles.loadTile(tile, 16383, -1, 7269, 7269, 7269, 7269, 7269, 
                                    7269, 7269,-1, 1, 16383, 8191, -1, 16383, -1);
            }
            if (frame = 3) {
                do Tiles.loadTile(tile, 16383, -1, -7269, -7269, -7269, -7269, -7269, 
                                    -7269, -7269, -1, 1, 16383, 8191, -1, 16383, -1);
            }
            return;
        }
        return;
    }

    method void loadLargeGearRight(Array tile) {
        if (orientation = 1) {
            if (frame = 1) {
                do Tiles.loadTile(tile, -1, -1, -22984, -22984, -22984, -22984, 
                                    -22984, -22984, -22984, -1, -32767 - 1, -4, 
                                    -8, -1, -4, -1);
            }
            if (frame = 3) {
                do Tiles.loadTile(tile, -4, -1, -9785, -9785, -9785, -9785, -9785, 
                                    -9785, -9785, -1, -32767 - 1, -4, -8, -1, -4, -1);
            }
            return;
        }
        
        return;
    }

    method void loadSmallGear(Array tile) {
        
        if (orientation = 3) {
            if (frame = 1) {
                do Tiles.loadTile(tile, -961, -961, -961, -961, -961, -1, -2017, 
                                    -961, 0, -1, 19506, 19506, 19506, 19506, -1, -385);
            }
            if (frame = 3) {
                do Tiles.loadTile(tile, -961, -961, -961, -961, -961, -1, -2017, 
                                    -961, -32767, -1, -19507, -19507, -19507, -19507, 
                                    -1, -385);
            }
        }
        if (orientation = 4) {
            if (frame = 1) {
                do Tiles.loadTile(tile, -189, -129, -189, -189, -129, -641, 1091, 
                                    1090, 1090, 1091, -641, -129, -189, -189, -129, 
                                    -189);
            }
            if (frame = 3) {
                do Tiles.loadTile(tile, -1, -189, -129, -129, -189, -701, 1151, 
                                    1150, 1150, 1151, -701, -189, -129, -129, -189, -1);
            }
        }
        return;
    }
}