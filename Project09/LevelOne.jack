/* First Level in the game */
class LevelOne {
    static Array tile, map, twoToThe, items;
    static int itemCount;
    static Player player;
    static Gear left, right;
    static boolean cleared;

    function void init(Array Atile, Array Amap, Array AtwoToThe, Array Aitems, Player Aplr) {
        let tile = Atile;
        let map = Amap;
        let twoToThe = AtwoToThe;
        let items = Aitems;
        let player = Aplr;
        let itemCount = 0;
        let cleared = false;
        let left = Gear.new(40, 6, 1, 1, false);
        let right = Gear.new(46, 6, 1, 1, false);

        let items[itemCount] = Item.new(42, 10, 5, 0, 0, 0, false, 1);
        let itemCount = itemCount + 1;
        let items[itemCount] = Item.new(44, 10, 5, 0, 0, 0, false, 1);
        let itemCount = itemCount + 1;
        let items[itemCount] = Item.new(46, 10, 5, 0, 0, 0, false, 1);
        let itemCount = itemCount + 1;

        return;
    }

    function void loadLevel() {
        let itemCount = 0;

        do player.setPosition(0, 22);

        do LevelOne.loadMap();

        do Tiles.loadClosedChestTile(tile);
        do Tiles.drawTile(58, 0, tile);

        do Tiles.loadEngineer(tile);
        do Tiles.drawTile(36, 14, tile);
        do LevelManager.updateMap(36, 14);

        do Tiles.loadDoorKeeper(tile);
        do Tiles.drawTile(8, 18, tile);
        do LevelManager.updateMap(8, 18);

        return;
    }

    function void loadLevelCompleted() {
        do LevelOne.loadMap();
        do player.setPosition(0, 22);

        do LevelOne.animateFans();
        do left.setAnimated(true);
        do right.setAnimated(true);

        do Tiles.loadEngineer(tile);
        do Tiles.drawTile(36, 14, tile);
        do LevelManager.updateMap(36, 14);

        do Tiles.loadDoorKeeper(tile);
        do Tiles.drawTile(22, 14, tile);
        do LevelManager.updateMap(22, 14);

        return;
    }

    function void loadMap() {
        do LevelOne.drawPipes();
        do LevelOne.drawFences();
        do LevelOne.drawDungeon();
        do LevelOne.drawWalls();
        do LevelOne.drawGenerator();

        do DungeonTiles.loadLeftGateClosed(tile);
        do Tiles.drawTile(24, 10, tile);
        do LevelManager.updateMap(24, 10);

        do DungeonTiles.loadRightGateClosed(tile);
        do Tiles.drawTile(26, 10, tile);
        do LevelManager.updateMap(26, 10);

        return;
    }

    function void animateTiles() {
        do left.draw();
        do right.draw();
        return;
    }

    function boolean winCondition() {
        var int x, y;

        let x = player.getX();
        let y = player.getY();
        if ((x = 6) & (y = 18)) {
            return true;
        }
        return false;
    }

    function boolean newWinCondition() {
        return false;
    }

    function void processEvents(int key) {
        var int x, y;
        var String s;
        let x = player.getX();
        let y = player.getY();
        if ((x = 34) & (y = 14)) {
            if (~cleared) {
                let s = "The generator is broken. We must fix it.";
                do DialogueManager.printDialogueLineOne(s);
                do s.dispose();
                let s = "Go talk to the engineer over there.";
                do DialogueManager.printDialogueLineTwo(s);
                do s.dispose();
            }
            else {
                let s = "Thank you for fixing the generator.";
                do DialogueManager.printDialogueLineOne(s);
                do s.dispose();
            }
        }

        if (cleared) {
            if ((y = 14) & (x > 23) & (x < 27)) {
                let s = "Due to the generator being down for so long, the";
                do DialogueManager.printDialogueLineOne(s);
                do s.dispose();

                let s = "dungeon core has destabilized.";
                do DialogueManager.printDialogueLineTwo(s);
                do s.dispose();

                do Sys.wait(3000);

                let s = "The trap mechanisms inside have been reactivated";
                do DialogueManager.printDialogueLineOne(s);
                do s.dispose();

                let s = "along with the guardian golem.";
                do DialogueManager.printDialogueLineTwo(s);
                do s.dispose();

                do Sys.wait(3000);

                let s = "Go inside and reboot the control device.";
                do DialogueManager.printDialogueLineOne(s);
                do s.dispose();

                
                do DungeonTiles.loadLeftGateOpen(tile);
                do Tiles.drawTile(24, 10, tile);
                do LevelManager.updateMap(24, 10);

                do DungeonTiles.loadRightGateOpen(tile);
                do Tiles.drawTile(26, 10, tile);
                do LevelManager.updateMap(26, 10);
            }
        }

        return;
    }

    function void processKeyCollision(Item item) {

        return;
    }

    function void animateFans() {
        var int i;
        var Item item;
        let i = 0;

        while (i < 3) {
            let item = items[i];
            do item.setAnimated(true);
            let i = i + 1;
        }
        return;
    }

    function int getItemCount() {
        return itemCount;
    }

    function void drawPipes() {
        // Load the horizontal pipe tile and draw all pipes
        do Pipe.loadPipeTile(tile, 2);
        do Tiles.buildTiles(0, 6, 0, false, true, tile);
        
        do Tiles.drawTile(0, 2, tile);
        do Tiles.drawTile(48, 2, tile);
        do Tiles.drawTile(50, 2, tile);

        do Tiles.buildTiles(6, 14, 4, false, true, tile);
        do Tiles.buildTiles(34, 42, 4, false, true, tile);

        do Tiles.drawTile(16, 6, tile);
        do Tiles.drawTile(12, 8, tile);
        do Tiles.drawTile(34, 8, tile);

        do Tiles.drawTile(50, 10, tile);

        // Load the vertical pipe tile and draw all pipes
        do Pipe.loadPipeTile(tile, 4);
        do Tiles.drawTile(22, 0, tile);
        do Tiles.drawTile(30, 0, tile);
        do Tiles.drawTile(38, 0, tile);

        do Tiles.buildTiles(2, 6, 8, false, false, tile);
        do Tiles.drawTile(16, 2, tile);
        do Tiles.drawTile(22, 2, tile);
        
        do Tiles.drawTile(52, 4, tile);
        
        do Tiles.drawTile(36, 6, tile);
        
        do Tiles.drawTile(44, 6, tile);

        do Tiles.drawTile(52, 8, tile);

        // Load the botton-to-right pipe connector and draw all pipes
        do Pipe.loadPipeTile(tile, 1);
        do Tiles.drawTile(28, 2, tile);
        do Tiles.drawTile(36, 2, tile);
        do Tiles.drawTile(32, 4, tile);
        do Tiles.drawTile(14, 6, tile);

        // Load the bottom-to-left pipe connector and draw all pipes
        do Pipe.loadPipeTile(tile, 3);
        do Tiles.drawTile(8, 0, tile);
        do Tiles.drawTile(2, 2, tile);
        do Tiles.drawTile(52, 2, tile);
        do Tiles.drawTile(44, 4, tile);
        do Tiles.drawTile(18, 6, tile);

        // Load the top-to-right pipe connector and draw all pipes
        do Pipe.loadPipeTile(tile, 7);
        do Tiles.drawTile(46, 2, tile);
        do Tiles.drawTile(2, 4, tile);
        do Tiles.drawTile(8, 8, tile);
        do Tiles.drawTile(18, 8, tile);

        // Load the top-to-left pipe connector and draw all pipes
        do Pipe.loadPipeTile(tile, 9);
        do Tiles.drawTile(30, 2, tile);
        do Tiles.drawTile(38, 2, tile);
        do Tiles.drawTile(16, 4, tile);
        do Tiles.drawTile(32, 6, tile);
        do Tiles.drawTile(14, 8, tile);
        do Tiles.drawTile(36, 8, tile);
        do Tiles.drawTile(52, 10, tile);

        // Load the vertical cracked pipe tile and draw all pipes
        do Pipe.loadPipeTile(tile, 6);
        do Tiles.drawTile(16, 0, tile);
        do Tiles.drawTile(46, 0, tile);
        do Tiles.drawTile(36, 4, tile);
        do Tiles.drawTile(52, 6, tile);

        // Load the horizontal cracked pipe tile and draw all pipes
        do Pipe.loadPipeTile(tile, 8);
        do Tiles.drawTile(4, 4, tile);
        do Tiles.drawTile(10, 8, tile);
        do Tiles.drawTile(32, 8, tile);
        return;
    }

    function void drawFences() {
        do Tiles.loadFenceTile(tile);

        // draw the bottom left group
        do Tiles.buildTiles(4, 14, 0, false, false, tile);
        do Tiles.buildTiles(6, 14, 2, false, false, tile);
        do Tiles.buildTiles(6, 14, 4, false, false, tile);
        do Tiles.buildTiles(6, 14, 6, false, false, tile);
        do Tiles.buildTiles(10, 14, 8, false, false, tile);
        do Tiles.buildTiles(8, 18, 10, false, true, tile);
        do Tiles.drawTile(8, 12, tile);
        do Tiles.drawTile(10, 12, tile);
        do Tiles.drawTile(8, 14, tile);
        do Tiles.drawTile(10, 14, tile);
        do Tiles.drawTile(16, 8, tile);

        do Tiles.drawTile(4, 2, tile);
        do Tiles.drawTile(6, 2, tile);
        do Tiles.drawTile(10, 6, tile);
        do Tiles.drawTile(12, 6, tile);
        do Tiles.buildTiles(10, 14, 0, false, true, tile);
        do Tiles.buildTiles(10, 14, 2, false, true, tile);
        do Tiles.buildTiles(0, 4, 18, false, false, tile);
        do Tiles.drawTile(20, 0, tile);
        do Tiles.drawTile(20, 2, tile);

        do Tiles.buildTiles(24, 28, 0, false, true, tile);
        do Tiles.drawTile(24, 2, tile);
        do Tiles.drawTile(26, 2, tile);

        do Tiles.buildTiles(32, 36, 0, false, true, tile);
        do Tiles.drawTile(32, 2, tile);
        do Tiles.drawTile(34, 2, tile);
        do Tiles.drawTile(34, 6, tile);
        do Tiles.buildTiles(32, 36, 10, false, true, tile);

        do Tiles.buildTiles(40, 44, 0, false, true, tile);
        do Tiles.buildTiles(40, 44, 2, false, true, tile);
        do Tiles.buildTiles(46, 50, 4, false, true, tile);
        do Tiles.buildTiles(48, 52, 0, false, true, tile);
        do Tiles.drawTile(50, 6, tile);
        do Tiles.drawTile(50, 8, tile);
        do Tiles.drawTile(50, 12, tile);
        do Tiles.drawTile(52, 12, tile);

        do Tiles.buildTiles(0, 12, 54, false, false, tile);
        do Tiles.buildTiles(0, 12, 56, false, false, tile);
        do Tiles.buildTiles(2, 12, 58, false, false, tile);
        do Tiles.buildTiles(0, 12, 60, false, false, tile);
        do Tiles.buildTiles(0, 12, 62, false, false, tile);

        return;
    }

    function void drawDungeon() {
        do DungeonTiles.loadWallTile(tile, 1);
        do Tiles.drawTile(20, 4, tile);

        do DungeonTiles.loadWallTile(tile, 2);
        do Tiles.buildTiles(22, 28, 4, false, true, tile);

        do DungeonTiles.loadWallTile(tile, 3);
        do Tiles.drawTile(30, 4, tile);

        do DungeonTiles.loadWallTile(tile, 4);
        do Tiles.drawTile(20, 6, tile);
        do Tiles.drawTile(20, 8, tile);

        do Tiles.loadWhiteTile(tile);
        do Tiles.buildTiles(22, 28, 6, false, true, tile);
        do Tiles.drawTile(22, 8, tile);
        do Tiles.drawTile(28, 8, tile);

        do DungeonTiles.loadWallTile(tile, 5);
        do Tiles.drawTile(24, 8, tile);
        do Tiles.drawTile(26, 8, tile);

        do DungeonTiles.loadWallTile(tile, 6);
        do Tiles.drawTile(30, 6, tile);
        do Tiles.drawTile(30, 8, tile);

        do DungeonTiles.loadWallTile(tile, 7);
        do Tiles.drawTile(20, 10, tile);

        do DungeonTiles.loadWallTile(tile, 8);
        do Tiles.drawTile(22, 10, tile);
        do Tiles.drawTile(28, 10, tile);

        do DungeonTiles.loadWallTile(tile, 9);
        do Tiles.drawTile(30, 10, tile);

        do Tiles.loadTorchTile(tile);
        do Tiles.drawTile(22, 12, tile);
        do Tiles.drawTile(28, 12, tile);
        do LevelManager.updateMap(22, 12);
        do LevelManager.updateMap(28, 12);
        
        return;
    }

    function void drawWalls() {
        do Tiles.loadQuadWallTile(tile);
        do Tiles.buildTiles(0, 10, 16, true, true, tile);
        do Tiles.buildTiles(12, 16, 12, true, false, tile);
        do Tiles.buildTiles(14, 20, 12, true, true, tile);

        do Tiles.buildTiles(30, 36, 12, true, true, tile);
        do Tiles.buildTiles(50, 62, 14, true, true, tile);

        do Tiles.eraseTile(6, 16);
        do Tiles.eraseTile(58, 14);

        do Tiles.loadClosedDoorTile(tile);
        do Tiles.drawTile(6, 16, tile);
        do Tiles.drawTile(58, 14, tile);
        return;
    }

    function void drawGenerator() {
        do GeneratorTiles.loadWallTile(tile, 1);
        do Tiles.drawTile(40, 8, tile);
        
        do GeneratorTiles.loadWallTile(tile, 2);
        do Tiles.buildTiles(42, 46, 8, false, true, tile);

        do GeneratorTiles.loadWallTile(tile, 3);
        do Tiles.drawTile(48, 8, tile);

        do GeneratorTiles.loadWallTile(tile, 4);
        do Tiles.drawTile(40, 10, tile);

        do GeneratorTiles.loadWallTile(tile, 6);
        do Tiles.drawTile(48, 10, tile);

        do GeneratorTiles.loadWallTile(tile, 7);
        do Tiles.drawTile(40, 12, tile);

        do GeneratorTiles.loadWallTile(tile, 8);
        do Tiles.buildTiles(42, 46, 12, false, true, tile);

        do GeneratorTiles.loadWallTile(tile, 9);
        do Tiles.drawTile(48, 12, tile);

        do GeneratorTiles.loadCircleTop(tile);
        do Tiles.drawTile(38, 6, tile);

        do GeneratorTiles.loadTubeTile(tile, 1);
        do Tiles.drawTile(38, 8, tile);

        do GeneratorTiles.loadTubeTile(tile, 2);
        do Tiles.drawTile(38, 10, tile);

        do GeneratorTiles.loadTubeTile(tile, 3);
        do Tiles.drawTile(38, 12, tile);

        if (~cleared) {
            do GeneratorTiles.loadCircleBottom(tile);
            do Tiles.drawTile(38, 14, tile);
            do LevelManager.updateMap(38, 14);
        }
        else {
            do GeneratorTiles.loadEnergyOrb(tile);
            do Tiles.drawTile(38, 14, tile);
            do LevelManager.updateMap(38, 14);

        }
        
        do GeneratorTiles.loadBeltTile(tile, 1);
        do Tiles.drawTile(40, 14, tile);
        do LevelManager.updateMap(40, 14);

        do GeneratorTiles.loadBeltTile(tile, 2);
        do Tiles.buildTiles(42, 46, 14, true, true, tile);

        do GeneratorTiles.loadBeltTile(tile, 3);
        do Tiles.drawTile(48, 14, tile);
        do LevelManager.updateMap(48, 14);
        
        return;
    }
}