/* Utility class to store, draw, and erase all the different tiles used in the game */
class Tiles {
    static int evenMask, oddMask;
    static Array screen;

    function void init() {
        let evenMask = 255;
        let oddMask = -256;
        let screen = 16384;
        return;
    }

    function void drawTile(int x, int y, Array tile) {
        var int i, row, location, halfTile;
        let i = 0;
        let row = 0;
        let location = (x / 2) + (y * 256);

        if ((x & 1) = 1) {
            while (i < 16) {
                let screen[location + row] = screen[location + row] & ((tile[i] * 256) | evenMask);
                if (tile[i] = -1) {
                    let screen[location + row + 1] = screen[location + row + 1] | evenMask;
                }
                else {
                    let halfTile = tile[i] / 256;
                    if (tile[i] < -1) {
                        let halfTile = halfTile - 1;
                    }
                    let screen[location + row + 1] = screen[location + row + 1] & (halfTile | oddMask);
                }
                let i = i + 1;
                let row = row + 32;
            }
        }
        else {
                while (i < 16) {
                let screen[location + row] = tile[i];
                let i = i + 1;
                let row = row + 32;
            }
        }
        return;
    }

    function void buildTiles(int r1, int r2, int ax, boolean flag, boolean axis, Array tile) {
        var int i;
        let i = r1;

        while (~(r2 < i)) {
            if (axis) {
                do Tiles.drawTile(i, ax, tile);
                if (flag) {
                    do LevelManager.updateMap(i, ax);
                }
            }
            else {
                do Tiles.drawTile(ax, i, tile);
                if (flag) {
                    do LevelManager.updateMap(ax, i);
                }
            }

            let i = i + 2;
        }
        return;
    }

    function void eraseTile(int x, int y) {
        var int i, row, location;
        
        let row = 0;
        let location = (x / 2) + (y * 256);
        let i = 0;
        let row = 0;
        
        if ((x & 1) = 1) {
            while (i < 16) {
                let screen[location + row] = screen[location + row] | oddMask;
                let screen[location + row + 1] = screen[location + row + 1] | evenMask;
                let i = i + 1;
                let row = row + 32;
            }
        }
        else {
            while(i < 16) {
                let screen[location + row] = -1;
                let i = i + 1;
                let row = row + 32;
            }
        }
        return;
    }

    function void loadTile(Array tile, int r1, int r2, int r3, int r4, int r5, int r6,
                           int r7, int r8, int r9, int r10, int r11, int r12, int r13,
                           int r14, int r15, int r16) {
        let tile[0] = r1;
        let tile[1] = r2;
        let tile[2] = r3;
        let tile[3] = r4;
        let tile[4] = r5;
        let tile[5] = r6;
        let tile[6] = r7;
        let tile[7] = r8;
        let tile[8] = r9;
        let tile[9] = r10;
        let tile[10] = r11;
        let tile[11] = r12;
        let tile[12] = r13;
        let tile[13] = r14;
        let tile[14] = r15;
        let tile[15] = r16;
        return;
    }

    function void loadBrickTile(Array tile) {
        do Tiles.loadTile(tile, 258, 258, 258, -1, 4104, 4104, 4104,
                          -1, 258, 258, 258, -1, 4104, 4104, 4104, -1);
        return;
    }

    function void loadHeartTile(Array tile) {
        do Tiles.loadTile(tile, -1, -1, -3697, -4489, -11893, -23547, -22011,
                          -23547, -12277, -6121, -3025, -1441, -577, -385, -1, -1);
        return;
    }

    function void loadVentTile(Array tile) {
        do Tiles.loadTile(tile, -32767 - 1, -16386, -32766, -28662, -30750, -32766, 
                        -30750, -32766, -30750, -32766, -30750, -32766, -28662, 
                        -32762, -32767 - 1, -1); 
        return;
    }

    function void loadQuadWallTile(Array tile) {
        do Tiles.loadTile(tile, 257, 32125, 17733, 17733, 17733, 32125, 257, -1,
                            257, 32125, 17733, 17733, 17733, 32125, 257, -1);
        return;
    }

    function void loadConsoleTile(Array tile) {
        do Tiles.loadTile(tile, -12285, -20483, -22523, -22523, -20483, -20483, 
                            -22235, -22235, -20483, -22235, -22235, -20483, -22235, 
                            -22235, -20483, -12285);
        return;
    }

    function void loadWaterTile(Array tile) {
        do Tiles.loadTile(tile, -1, -1029, -515, -258, -1, -4113, -8225, -16449,
                            -1, -1029, -515, -258, -1, -4113, -8225, -16449);
        return;
    }

    function void loadTorchTile(Array tile) {
        do Tiles.loadTile(tile, -1, -129, -257, -385, -961, -577, -385, -1057, 
                            -961, -1, -385, -257, -129, -385, -1, -577);
        return;
    }

    function void loadClosedDoorTile(Array tile) {
        do Tiles.loadTile(tile, -8185, -16381, -28687, -28647, -28663, -28647, 
                            -28631, -28135, -27639, -27383, -27383, -27623, -28119, 
                            -28647, -28663, -28663);
        return;
    }

    function void loadOpenDoorTile(Array tile) {
        do Tiles.loadTile(tile, -1, -16381, -32767, -24583, -24631, -24631, -24631, 
                            -24631, -24631, -24631, -24695, -24631, -24631, -24631, 
                            -25911, -27319);
        return;
    }

    function void loadEngineer(Array tile) {
        do Tiles.loadTile(tile, -1, -2041, -4093, -8191, -4111, -6135, -5051, -5051, 
                            10249, 8191, -32221, 8641, -1015, -545, -673, -1);
        return;
    }

    function void loadDoorKeeper(Array tile) {
        do Tiles.loadTile(tile, -1, -1, -2017, -4081, -8185, -8121, -8025, -7897, 
                            -401, -6121, -14365, -32507, -32767, -14061, -1, -1633);
        return;
    }

    function void loadClosedChestTile(Array tile) {
        do Tiles.loadTile(tile, -1, -1, -1, -1, -16381, -16387, 27306, 21846, 16386, 
                            16386, 32190, 16770, 24582, 16386, 32766, 0);
        return;
    }

    function void loadOpenChestTile(Array tile) {
        do Tiles.loadTile(tile, -16381, -16963, 16386, 23610, 24570, 24570, 24570, 
                            24570, 24570, 32190, 16770, 16386, 24582, 16386, 32766, 0);
        return;
    }

    function void loadFenceTile(Array tile) {
        do Tiles.loadTile(tile, -258, 32125, -17477, -10281, -4113, -10249, -17477, 
                            32125, -258, 32253, -17477, -10281, -4113, -2089, -17477, 32125);
        return;
    }

    function void loadSmallFan(Array tile, int frame) {
        if (frame = 1) {
        do Tiles.loadTile(tile, -1, -961, -3121, -4105, -11317, -11893, -18019, 
                            -16771, -16771, -18019, -11893, -11317, -4105, -3121, -961, -1);
        }
        if (frame = 3) {
        do Tiles.loadTile(tile, -1, -961, -3121, -4489, -8581, -8581, -16387, -23995, 
                            -23995, -16387, -8581, -8581, -4489, -3121, -961, -1);
        }
        return;
    }

    function void loadSpikeTwo(Array tile, int frame) {
        if (frame = 11) {
            do Tiles.loadBlankTile(tile);
        }
        if ((frame = 1) |
            (frame = 10)) {
            do Tiles.loadTile(tile, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2065, 
                                -5161, -5161, -8773, -10837, -19867);
        }
        if ((frame = 2) |
            (frame = 9)) {
            do Tiles.loadTile(tile, -1, -1, -1, -1, -1, -2065, -5161, -5161, -5161,
                                -5161, -8773, -8773, -10837, -10837, -19867, -19867);
        }
        if (frame = 3) {
            do Tiles.loadTile(tile, -2065, -5161, -5161, -5161, -5161, -5161, -8773, 
                                -8773, -8773, -10837, -10837, -19867, -19867, -19867, 
                                -19867, -19867);
        }
        return;
    }

    function void loadDialogueBox(Array tile, int id) {
        if (id = 1) {
            do Tiles.loadTile(tile, 1, -2, 2, 26, 26, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2);
        }
        if (id = 2) {
            do Tiles.loadTile(tile, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        }
        if (id = 3) {
            do Tiles.loadTile(tile, -32767 - 1, 32767, 16384, 22528, 22528, 16384, 
                                16384, 16384, 16384, 16384, 16384, 16384, 16384, 16384, 
                                16384, 16384);
        }
        if (id = 4) {
            do Tiles.loadTile(tile, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,2, 2, 2);
        }
        if (id = 5) {
            do Tiles.loadTile(tile, 0, 0, 0, 0, 0, 0, 0, 0, 0,0, 0, 0, 0, 0, 0, 0);
        }
        if (id = 6) {
            do Tiles.loadTile(tile, 16384, 16384, 16384, 16384, 16384, 16384, 16384, 
                                16384, 16384, 16384, 16384, 16384, 16384, 16384, 16384, 
                                16384);
        }
        if (id = 7) {
            do Tiles.loadTile(tile, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 26, 26, 2, -2, 1);
    }
        if (id = 8) {
            do Tiles.loadTile(tile, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0);
        }
        if (id = 9) {
            do Tiles.loadTile(tile, 16384, 16384, 16384, 16384, 16384, 16384, 16384, 
                                16384, 16384, 16384, 16384, 22528, 22528, 16384, 32767, 
                                -32767 - 1);
        }

        return;
    }

    function void loadBlankTile(Array tile) {
        do Tiles.loadTile(tile, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
                            -1, -1, -1, -1);
        return;
    }

    function void loadWhiteTile(Array tile) {
        var int i;

        let i = 0;

        while(i < 16) {
            let tile[i] = 0;
            let i = i + 1;
        }
        return;
    }
}