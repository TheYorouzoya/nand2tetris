class Skull {
    field int x, y, direction;
    field boolean fireballActive;
    field int wallX, wallY, counter;
    field Array tile;
    field Item fireball;

    constructor Skull new(int Ax, int Ay, int Adirection, int fireballBound) {
        let x = Ax;
        let y = Ay;
        let direction = Adirection;
        let fireballActive = false;
        let counter = 0;
        let tile = Array.new(16);

        do loadSkullClose();
        do drawSkull();
        do initializeFireball(fireballBound);
        do attack();
        return this;
    }

    method void dispose() {
        do fireball.dispose();
        do tile.dispose();
        do Memory.deAlloc(this);
        return;
    }

    method void initializeFireball(int bound) {
        var int iX, iY;
        let wallX = x;
        let wallY = y;
        let iX = x;
        let iY = y;

        if (direction = 1) {
            let iY = y - 2;
            let wallY = bound;
        }
        if (direction = 2) {
            let iY = y + 2;
            let wallY = bound;
        }
        if (direction = 3) {
            let iX = x - 2;
            let wallX = bound;
        }
        if (direction = 4) {
            let iX = x + 2;
            let wallX = bound;
        }
        let fireball = Item.new(iX, iY, 7, direction, 0, 3, false, 1);
        return;
    }

    method void tick(int playerX, int playerY, Player player) {
        if (counter = 4) {
            do loadSkullClose();
            do drawSkull();
        }
        if (fireballActive) {
            do fireball.moveItem();
            if (fireball.collidesWith(playerX, playerY)) {
                do player.takeDamage();
                do fireball.erase();
                let fireballActive = false;
                do player.respawn();
            }
            if (fireball.collidesWith(wallX, wallY)) {
                do fireball.erase();
                if (counter > 25) {
                    do attack();
                } 
                else {
                    let fireballActive = false;
                }
            }
        }
        if ((~fireballActive) & (counter > 25)) {
            do attack();
        }
        let counter = counter + 1;
        return;
    }

    method void drawSkull() {
        do Tiles.drawTile(x, y, tile);
        return;
    }

    method void attack() {
        // skull's mouth opens
        let counter = 0;
        do loadSkullOpen();
        do drawSkull();

        // skull fires fireball
        do spawnFireball();

        return;
    }

    method void spawnFireball() {
        let fireballActive = true;

        if (direction = 1) {
            do fireball.setPosition(x, y - 2);
        }
        if (direction = 2) {
            do fireball.setPosition(x, y + 2);
        }
        if (direction = 3) {
            do fireball.setPosition(x - 2, y);
        }
        if (direction = 4) {
            do fireball.setPosition(x + 2, y);
        }
        do fireball.draw();
        return;
    }

    method void moveFireball() {
        if (direction = 1) { do fireball.moveUp(); }
        if (direction = 2) { do fireball.moveDown(); }
        if (direction = 3) { do fireball.moveLeft(); }
        if (direction = 4) { do fireball.moveRight(); }
        return;
    }

    method void loadSkullClose() {
        if (direction = 3) {
            do Tiles.loadTile(tile, -8129, -16353, -32753, 455, 551, 615, 551, 459, 
                                1, -27029, -5227, -3073, -3659, -1973, -1017, -1);
        }
        if (direction = 4) {
            do Tiles.loadTile(tile, -1017, -2045, -4095, -7296, -7104, -6592, -7104, 
                                -11392, -32767 - 1, -10647, -22057, -49, -21105, 
                                -11745, -8129, -1);
        }
        return;
    }

    method void loadSkullOpen() {
        if (direction = 3) {
            do Tiles.loadTile(tile, -8129, -16353, -32753, 455, 551, 615, 551, 459, 
                                1, -27029, -5227, -6145, -6145, -3329, -3585, -1857);
        }
        if (direction = 4) {
            do Tiles.loadTile(tile, -1017, -2045, -4095, -7296, -7104, -6592, -7104, 
                                -11392, -32767 - 1, -10647, -22057, -25, -25, -177, 
                                -113, -737);
        }
        return;
    }

    function void loadFireball(Array tile, int dir) {
        if (dir = 3) {
            do Tiles.loadTile(tile, -1, -1, -1, -1, -249, -773, -3187, -14539, 3893, 
                                -14587, -3187, -773, -249, -1, -1, -1);
        }
        if (dir = 4) {
            do Tiles.loadTile(tile, -1, -1, -1, -1, -7937, -8385, -20017, -21277, 
                                -21264, -24349, -20017, -8385, -7937, -1, -1, -1);
        }
        return;
    }
}