class Pipe {
    field int x, y;
    field Array tileP;
    field int currentOrientation;

    constructor Pipe new(int Ax, int Ay, int orientation) {
        let x = Ax;
        let y = Ay;
        let currentOrientation = orientation;
        let tileP = Array.new(16);
        do loadTile(currentOrientation);
        do Tiles.drawTile(x, y, tileP);

        return this;
    }

    method void draw() {
        do Tiles.drawTile(x, y, tileP);
        return;
    }

    method void rotate() {
        let currentOrientation = currentOrientation + 1;
        if (currentOrientation = 5) {
            let currentOrientation = 1;
        }
        do loadTile(currentOrientation);
        do Tiles.eraseTile(x, y);
        do Tiles.drawTile(x, y, tileP);
        
        return;
    }

    method void loadTile(int orientation) {
        if (orientation = 1) {
            do Pipe.loadPipeTile(tileP, 1);
        }
        if (orientation = 2) {
            do Pipe.loadPipeTile(tileP, 3);
        }
        if (orientation = 3) {
            do Pipe.loadPipeTile(tileP, 9);
        }
        if (orientation = 4) {
            do Pipe.loadPipeTile(tileP, 7);
        }
        return;
    }

    method int getOrientation() {
        return currentOrientation;
    }

    function void loadPipeTile(Array tile, int pipeId) {
        if (pipeId = 1) {
            do Tiles.loadTile(tile, -1, 16383, -16129, 24383, 16607, 16431, 16407, 
                                16407, 16395, 16395, 16395, 16395, 28683, -4085, 
                                16381, -24571);
        }
        if (pipeId = 2) {
            do Tiles.loadTile(tile, -1, 16380, -16381, 32766, 16386, 16386, 16386, 
                                16386, 16386, 16386, 16386, 16386, 32766, -16381, 
                                16380, -1);
        }
        if (pipeId = 3) {
            do Tiles.loadTile(tile, -1, -4, -253, -770, -1278, -3070, -6142, -6142, 
                                -12286, -12286, -12286, -12286, -12274, -16369, 
                                -16388, -24571);
        }
        if (pipeId = 4) {
            do Tiles.loadTile(tile, -24571, -16387, -12277, -12277, -12277, -12277, 
                                -12277, -12277, -12277, -12277, -12277, -12277, 
                                -12277, -12277, -16387, -24571);
        }
        if (pipeId = 6) {
            do Tiles.loadTile(tile, -24571, -16387, -12277, -12277, -10213, -10213, 
                                -12277, -9557, -10917, -12277, -10213, -10213, -12277, 
                                -12277, -16387, -24571);
        }
        if (pipeId = 7) {
            do Tiles.loadTile(tile, -24571, 16381, -4093, 28683, 16395, 16395, 16395, 
                                16395, 16407, 16407, 16431, 16607, 32575, -16129, 
                                16383, -1);
        }
        if (pipeId = 8) {
            do Tiles.loadTile(tile, -1, 16380, -16381, 32766, 19634, 16642, 16514, 
                                16642, 16514, 16642, 16514, 19762, 32766, -16381, 
                                16380, -1);
        }
        if (pipeId = 9) {
            do Tiles.loadTile(tile, -24571, -16388, -12273, -12274, -12286, -12286, 
                                -12286, -12286, -6142, -6142, -3070, -1278, -774, 
                                -253, -4, -1);
        }
        return;
    }
}