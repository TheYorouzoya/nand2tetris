/*
The second level contains a bunch of misaligned pipes. The player rotates these using
the console devices present on the level. Once all the pipes in a particular area are
aligned, the doors are unlocked and the next set of consoles becomes accessible.
Within the locked areas are two power cores, which the player needs to collect and
return to the pump near the starting location.

In order to clear the level, all the pipes must be aligned and the cores returned
to the pump. The player can then proceed to the gate at the end and move onto the
next level.
*/
class LevelTwo {
    static Array tile, map, twoToThe, items;
    static int itemCount, powerCores;
    static Player player;
    static LargeFan fanA, fanB;
    static Gear gearA, gearB;
    static Pipe pipe0, pipe1, pipe2, pipe3, pipe4, pipe5, pipe6, pipe7;
    static boolean consoleADone, consoleBDone, consoleCDone;
    static boolean coreACollected, coreBCollected;
    static boolean cleared;

    function void init(Array Atile, Array Amap, Array AtwoToThe, Array Aitems, Player Aplr) {
        let tile = Atile;
        let map = Amap;
        let twoToThe = AtwoToThe;
        let items = Aitems;
        let player = Aplr;
        let itemCount = 0;
        let fanA = LargeFan.new(2, 8, false);
        let fanB = LargeFan.new(14, 8, false);
        let consoleADone = false;
        let consoleBDone = false;
        let consoleCDone = false;
        let coreACollected = false;
        let coreBCollected = false;
        let cleared = false;
        let powerCores = 0;
        return;
    }

    function void dispose() {
        var Item item;

        do fanA.dispose();
        do fanB.dispose();

        do pipe0.dispose();
        do pipe1.dispose();
        do pipe2.dispose();
        do pipe3.dispose();
        do pipe4.dispose();
        do pipe5.dispose();
        do pipe6.dispose();
        do pipe7.dispose();
        do gearA.dispose();
        do gearB.dispose();

        return;
    }

    function void loadLevel() {
        let itemCount = 0;

        do player.setPosition(0, 20);

        do LevelTwo.drawPipes();
        do LevelTwo.drawVents();
        do LevelTwo.drawFences();
        do LevelTwo.drawWalls();
        do LevelTwo.drawDoors();
        do LevelTwo.drawConsoles();
        do LevelTwo.drawControlRoom();
        do LevelTwo.drawWaterAreaOne(true);
        do LevelTwo.drawWaterAreaTwo(true);
        do LevelTwo.drawWaterAreaThree(true);
        do LevelTwo.updateMap();

        do Tiles.loadDoorKeeper(tile);
        do Tiles.drawTile(2, 14, tile);
        do LevelManager.updateMap(2, 14);

        let pipe0 = Pipe.new(24, 10, 1);
        let pipe1 = Pipe.new(24, 4, 2);
        let pipe2 = Pipe.new(30, 12, 3);
        let pipe3 = Pipe.new(46, 22, 4);
        let pipe4 = Pipe.new(52, 16, 2);
        let pipe5 = Pipe.new(52, 6, 3);
        let pipe6 = Pipe.new(58, 12, 2);
        let pipe7 = Pipe.new(58, 20, 3);

        let gearA = Gear.new(34, 16, 4, 2, false);
        let gearB = Gear.new(46, 8, 3, 2, false);

        let items[itemCount] = Item.new(38, 2, 6, 0, 0, 1, false, 1);
        let itemCount = itemCount + 1;
        let items[itemCount] = Item.new(52, 24, 6, 0, 0, 1, false, 1);
        let itemCount = itemCount + 1;

        do DialogueManager.clearDialogueBox();

        return;
        
    }

    function void animateTiles() {
        do fanA.draw();
        do fanB.draw();
        do gearA.draw();
        do gearB.draw();
        
        return;
    }

    function boolean winCondition() {
        if (cleared) {
            if ((player.getX() = 56) & (player.getY() = 2)) {
                return true;
            }
        }
        return false;
    }

    function void processEvents(int key) {
        var int playerX, playerY;
        var String s;

        let playerX = player.getX();
        let playerY = player.getY();

        if ((playerX = 4) & (playerY = 14) & (~cleared)) {
            let s = "Fix the pipes and retrieve the power cores.";
            do DialogueManager.printDialogueLineOne(s);
            do s.dispose();
            let s = "Press [E] on the consoles to rotate the pipes.";
            do DialogueManager.printDialogueLineTwo(s);
            do s.dispose();
        }

        if (key = 69) {
            if ((playerX = 22) & (playerY = 14) & (~consoleADone)) {
                do pipe0.rotate();
                do pipe1.rotate();
                do Sys.wait(150);
            }
            if ((playerX = 26) & (playerY = 10) & (~consoleADone)) {
                do pipe1.rotate();
                do pipe2.rotate();
                do Sys.wait(150);
            }
            if ((playerX = 44) & (playerY = 12) & (~consoleBDone)) {
                do pipe3.rotate();
                do pipe4.rotate();
                do Sys.wait(150);
            }
            if ((playerX = 48) & (playerY = 12) & (~consoleBDone)) {
                do pipe4.rotate();
                do pipe5.rotate();
                do pipe6.rotate();
                do Sys.wait(150);
            }
            if ((playerX = 54) & (playerY = 16) & (~consoleCDone)) {
                do pipe6.rotate();
                do pipe7.rotate();
                do Sys.wait(150);
            }

            do LevelTwo.checkPipes();
        }
        if (key = 131) {
            if ((playerX = 40) & (playerY = 20) & consoleADone) {
                do player.setPosition(40, 16);
            }
            if ((playerX = 48) & (playerY = 18)) {
                do player.setPosition(48, 14);
            }
        }
        if (key = 133) {
            if ((playerX = 40) & (playerY = 16)) {
                do player.setPosition(40, 20);
            }
            if ((playerX = 48) & (playerY = 14) & consoleBDone) {
                do player.setPosition(48, 18);
            }
        }
        if (key = 132) {
            if ((playerX = 50) & (playerY = 8) & consoleCDone) {
                do player.setPosition(54, 8);
            }
        }
        if (key = 130) {
            if ((playerX = 54) & (playerY = 8)) {
                do player.setPosition(50, 8);
            }
        }
        if (coreACollected) {
            if ((playerX = 6) & (playerY = 14)) {
                do fanA.setAnimated(true);
                let s = "Power Core 1 installed.";
                do DialogueManager.printDialogueLineOne(s);
                do s.dispose();
                do GeneratorTiles.loadEnergyOrb(tile);
                do Tiles.eraseTile(6, 12);
                do Tiles.drawTile(6, 12, tile);
                let coreACollected = false;
                let powerCores = powerCores + 1;
            }
        }
        if (coreBCollected) {
            if ((playerX = 12) & (playerY = 14)) {
                do fanB.setAnimated(true);
                let s = "Power Core 2 installed.";
                do DialogueManager.printDialogueLineOne(s);
                do s.dispose();
                do GeneratorTiles.loadEnergyOrb(tile);
                do Tiles.eraseTile(12, 12);
                do Tiles.drawTile(12, 12, tile);
                let coreBCollected = false;
                let powerCores = powerCores + 1;
            }
        }
        if ((powerCores = 2) & (consoleCDone)) {
            let cleared = true;
            do Tiles.eraseTile(56, 0);
            do Tiles.loadOpenDoorTile(tile);
            do Tiles.drawTile(56, 0, tile);
            let s = "Level cleared! Proceed to the next room.";
            do DialogueManager.printDialogueLineOne(s);
            do s.dispose();
            let powerCores = 0;
        }

        return;
    }

    function void checkPipes() {
        var String s;
        if (~consoleADone) {
            if ((pipe0.getOrientation() = 3) &
                (pipe1.getOrientation() = 1) &
                (pipe2.getOrientation() = 4)) {
                    let consoleADone = true;
                    do LevelTwo.drawWaterAreaOne(false);
                    do Tiles.eraseTile(40, 18);
                    do Tiles.loadOpenDoorTile(tile);
                    do Tiles.drawTile(40, 18, tile);
                    do gearA.setAnimated(true);
                    let s = "Pipes are aligned! Area no longer sumberged.";
                    do DialogueManager.printDialogueLineOne(s);
                    do s.dispose();
                }
        }
        if (~consoleBDone) {
            if ((pipe3.getOrientation() = 2) &
                (pipe4.getOrientation() = 3) &
                (pipe5.getOrientation() = 2)) {
                    let consoleBDone = true;
                    do LevelTwo.drawWaterAreaTwo(false);
                    do Tiles.eraseTile(48, 16);
                    do Tiles.loadOpenDoorTile(tile);
                    do Tiles.drawTile(48, 16, tile);
                    let s = "Pipes are aligned! Area no longer submerged.";
                    do DialogueManager.printDialogueLineOne(s);
                    do s.dispose();
                }
        }
        if (~consoleCDone) {
            if ((pipe6.getOrientation() = 2) &
                (pipe7.getOrientation() = 4)) {
                    let consoleCDone = true;
                    do LevelTwo.drawWaterAreaThree(false);
                    do Tiles.eraseTile(52, 8);
                    do Tiles.loadOpenDoorTile(tile);
                    do Tiles.drawTile(52, 8, tile);
                    do gearB.setAnimated(true);
                    let s = "Pipes are alignd! Area no longer submerged.";
                    do DialogueManager.printDialogueLineOne(s);
                    do s.dispose();
                }
        }
        return;
    }

    function void processKeyCollision(Item item) {
        var String s;
        if (item.getX() = 38) {
            let coreACollected = true;
        }
        else {
            let coreBCollected = true;
        }
        let s = "Power core collected. Return it to the generator.";
        do DialogueManager.printDialogueLineOne(s);
        do s.dispose();

        return;
    }

    function int getItemCount() {
        return itemCount;
    }

    function void drawPipes() {
        do Pipe.loadPipeTile(tile, 1);
        do Tiles.drawTile(18, 0, tile);
        do Tiles.drawTile(36, 0, tile);
        do Tiles.drawTile(10, 4, tile);
        do Tiles.drawTile(16, 4, tile);
        do Tiles.drawTile(42, 16, tile);


        do Pipe.loadPipeTile(tile, 2);

        do Tiles.drawTile(10, 0, tile);
        do Tiles.buildTiles(20, 28, 0, true, tile);
        do Tiles.drawTile(38, 0, tile);

        do Tiles.drawTile(0, 2, tile);
        do Tiles.drawTile(4, 2, tile);
        do Tiles.drawTile(42, 2, tile);
        do Tiles.drawTile(46, 2, tile);
        do Tiles.drawTile(48, 2, tile);

        do Tiles.buildTiles(26, 34, 4, true, tile);
        
        do Tiles.drawTile(48, 6, tile);
        do Tiles.drawTile(50, 6, tile);

        do Tiles.drawTile(20, 10, tile);

        do Tiles.drawTile(32, 12, tile);
        do Tiles.drawTile(34, 12, tile);
        do Tiles.drawTile(54, 12, tile);
        do Tiles.drawTile(56, 12, tile);

        do Tiles.drawTile(46, 16, tile);
        do Tiles.drawTile(50, 16, tile);

        do Tiles.drawTile(38, 18, tile);
        do Tiles.drawTile(60, 20, tile);
        do Tiles.drawTile(62, 20, tile);


        do Pipe.loadPipeTile(tile, 3);
        do Tiles.drawTile(40, 0, tile);
        do Tiles.drawTile(6, 2, tile);
        do Tiles.drawTile(36, 12, tile);


        do Pipe.loadPipeTile(tile, 4);

        do Tiles.drawTile(2, 0, tile);
        do Tiles.buildTiles(0, 4, 44, false, tile);

        do Tiles.drawTile(12, 2, tile);
        do Tiles.drawTile(18, 2, tile);
        do Tiles.drawTile(30, 2, tile);
        do Tiles.drawTile(36, 2, tile);

        do Tiles.drawTile(2, 4, tile);
        do Tiles.drawTile(6, 4, tile);

        do Tiles.drawTile(24, 6, tile);
        do Tiles.drawTile(30, 6, tile);

        do Tiles.drawTile(24, 8, tile);
        do Tiles.drawTile(30, 8, tile);

        do Tiles.drawTile(52, 10, tile);

        do Tiles.drawTile(36, 14, tile);
        do Tiles.drawTile(52, 14, tile);
        do Tiles.drawTile(58, 14, tile);

        do Tiles.drawTile(44, 18, tile);
        do Tiles.drawTile(58, 18, tile);

        do Tiles.drawTile(44, 20, tile);

        do Tiles.drawTile(46, 24, tile);


        do Pipe.loadPipeTile(tile, 6);
        do Tiles.drawTile(36, 16, tile);


        do Pipe.loadPipeTile(tile, 7);
        do Tiles.drawTile(8, 0, tile);
        do Tiles.drawTile(40, 2, tile);
        do Tiles.drawTile(44, 6, tile);
        do Tiles.drawTile(36, 18, tile);
        do Tiles.drawTile(44, 22, tile);


        do Pipe.loadPipeTile(tile, 8);
        do Tiles.drawTile(46, 6, tile);


        do Pipe.loadPipeTile(tile, 9);
        do Tiles.drawTile(50, 2, tile);
        do Tiles.drawTile(12, 4, tile);
        do Tiles.drawTile(18, 4, tile);
        do Tiles.drawTile(36, 4, tile);
        do Tiles.drawTile(42, 18, tile);

        return;
    }

    function void drawVents() {
        do Tiles.loadVentTile(tile);
        do Tiles.drawTile(12, 0, tile);
        do Tiles.drawTile(30, 0, tile);
        do Tiles.drawTile(50, 0, tile);
        do Tiles.drawTile(2, 2, tile);
        do Tiles.drawTile(22, 10, tile);
        do Tiles.drawTile(30, 10, tile);
        do Tiles.drawTile(52, 12, tile);
        do Tiles.drawTile(44, 16, tile);
        do Tiles.drawTile(58, 16, tile);
        
        return;
    }

    function void drawFences() {
        do Tiles.loadFenceTile(tile);

        do Tiles.drawTile(0, 0, tile);
        do Tiles.drawTile(4, 0, tile);
        do Tiles.drawTile(6, 0, tile);
        do Tiles.drawTile(14, 0, tile);
        do Tiles.drawTile(16, 0, tile);
        do Tiles.drawTile(32, 0, tile);
        do Tiles.drawTile(34, 0, tile);
        do Tiles.drawTile(42, 0, tile);
        do Tiles.drawTile(46, 0, tile);
        do Tiles.drawTile(48, 0, tile);
        
        do Tiles.drawTile(8, 2, tile);
        do Tiles.drawTile(10, 2, tile);
        do Tiles.drawTile(14, 2, tile);
        do Tiles.drawTile(16, 2, tile);
        do Tiles.buildTiles(20, 28, 2, true, tile);
        do Tiles.drawTile(32, 2, tile);
        do Tiles.drawTile(34, 2, tile);

        do Tiles.drawTile(0, 4, tile);
        do Tiles.drawTile(4, 4, tile);
        do Tiles.drawTile(8, 4, tile);
        do Tiles.drawTile(14, 4, tile);
        do Tiles.buildTiles(4, 8, 20, false, tile);
        do Tiles.buildTiles(4, 8, 22, false, tile);
        
        return;
    }

    function void drawWalls() {
        do Tiles.loadQuadWallTile(tile);
        do Tiles.drawTile(52, 0, tile);
        do Tiles.drawTile(54, 0, tile);
        do Tiles.buildTiles(58, 62, 0, true, tile);
        return;
    }
        
    function void drawDoors() {
        do Tiles.loadClosedDoorTile(tile);
        do Tiles.drawTile(56, 0, tile);
        do Tiles.drawTile(52, 8, tile);
        do Tiles.drawTile(48, 16, tile);
        do Tiles.drawTile(40, 18, tile);
        return;
    }
        
    function void drawConsoles() {
        do Tiles.loadConsoleTile(tile);
        do Tiles.drawTile(28, 10, tile);
        do Tiles.drawTile(22, 12, tile);
        do Tiles.drawTile(50, 12, tile);
        do Tiles.drawTile(44, 14, tile);
        do Tiles.drawTile(56, 16, tile);
        return;
    }
    
    function void drawControlRoom() {
        do GeneratorTiles.loadSquareWallTile(tile);
        do Tiles.buildTiles(0, 18, 6, true, tile);
        do Tiles.buildTiles(8, 14, 0, false, tile);
        do Tiles.buildTiles(8, 14, 18, false, tile);

        do GeneratorTiles.loadComponentOne(tile, 1);
        do Tiles.drawTile(6, 8, tile);

        do GeneratorTiles.loadComponentOne(tile, 2);
        do Tiles.drawTile(8, 8, tile);

        do GeneratorTiles.loadComponentOne(tile, 3);
        do Tiles.drawTile(6, 10, tile);

        do GeneratorTiles.loadComponentOne(tile, 4);
        do Tiles.drawTile(8, 10, tile);

        do GeneratorTiles.loadComponentTwo(tile, 1);
        do Tiles.drawTile(10, 8, tile);

        do GeneratorTiles.loadComponentTwo(tile, 2);
        do Tiles.drawTile(12, 8, tile);

        do GeneratorTiles.loadComponentTwo(tile, 3);
        do Tiles.drawTile(10, 10, tile);

        do GeneratorTiles.loadComponentTwo(tile, 4);
        do Tiles.drawTile(12, 10, tile);

        do GeneratorTiles.loadWires(tile);
        do Tiles.buildTiles(2, 16, 12, true, tile);

        do Tiles.eraseTile(6, 12);
        do Tiles.eraseTile(12, 12);

        do GeneratorTiles.loadCircleBottom(tile);
        do Tiles.drawTile(6, 12, tile);
        do Tiles.drawTile(12, 12, tile);

        return;
    }

    function void drawWaterAreaOne(boolean submerged) {
        if (submerged) {
            do Tiles.loadWaterTile(tile);
        }
        else {
            do Tiles.loadBlankTile(tile);
        }

        do Tiles.buildTiles(38, 42, 4, true, tile);
        do Tiles.buildTiles(32, 42, 6, true, tile);
        do Tiles.buildTiles(32, 44, 8, true, tile);
        do Tiles.drawTile(48, 8, tile);
        do Tiles.drawTile(50, 8, tile);
        do Tiles.buildTiles(32, 50, 10, true, tile);
        do Tiles.buildTiles(38, 48, 12, true, tile);
        do Tiles.buildTiles(38, 42, 14, true, tile);
        do Tiles.buildTiles(46, 50, 14, true, tile);
        do Tiles.drawTile(38, 16, tile);
        do Tiles.drawTile(40, 16, tile);

        return;
    }

    function void drawWaterAreaTwo(boolean submerged) {
        if (submerged) {
            do Tiles.loadWaterTile(tile);
        }
        else {
            do Tiles.loadBlankTile(tile);
        }
        do Tiles.drawTile(54, 14, tile);
        do Tiles.drawTile(56, 14, tile);
        do Tiles.drawTile(54, 16, tile);
        do Tiles.buildTiles(46, 56, 18, true, tile);
        do Tiles.buildTiles(46, 56, 20, true, tile);
        do Tiles.buildTiles(48, 62, 22, true, tile);
        do Tiles.drawTile(48, 24, tile);
        do Tiles.drawTile(50, 24, tile);
        do Tiles.buildTiles(54, 62, 24, true, tile);
        
        return;
    }

    function void drawWaterAreaThree(boolean submerged) {
        if (submerged) {
            do Tiles.loadWaterTile(tile);
        }
        else {
            do Tiles.loadBlankTile(tile);
        }
        do Tiles.drawTile(52, 2, tile);
        do Tiles.buildTiles(46, 52, 4, true, tile);
        do Tiles.buildTiles(2, 10, 54, false, tile);
        do Tiles.buildTiles(2, 10, 56, false, tile);
        do Tiles.buildTiles(2, 10, 58, false, tile);
        do Tiles.buildTiles(2, 18, 60, false, tile);
        do Tiles.buildTiles(2, 18, 62, false, tile);

        return;
    }

    function void updateMap() {
        do LevelManager.updateMap(0, 14);
        do LevelManager.updateMapBulk(0, 18, 12, true);
        do LevelManager.updateMap(18, 14);
        do LevelManager.updateMapBulk(20, 24, 10, true);
        do LevelManager.updateMap(22, 12);
        do LevelManager.updateMapBulk(26, 34, 4, true);
        do LevelManager.updateMapBulk(4, 8, 24, false);
        do LevelManager.updateMapBulk(0, 4, 36, false);
        do LevelManager.updateMap(38, 0);
        do LevelManager.updateMap(40, 0);
        do LevelManager.updateMapBulk(40, 50, 2, true);
        do LevelManager.updateMapBulk(50, 62, 0, true);
        do LevelManager.updateMapBulk(6, 12, 30, false);
        do LevelManager.updateMap(28, 10);
        do LevelManager.updateMapBulk(32, 36, 12, true);
        do LevelManager.updateMapBulk(14, 18, 36, false);
        do LevelManager.updateMap(34, 16);
        do LevelManager.updateMapBulk(38, 42, 18, true);
        do LevelManager.updateMapBulk(42, 52, 16, true);
        do LevelManager.updateMap(44, 14);
        do LevelManager.updateMapBulk(18, 22, 44, false);
        do LevelManager.updateMap(46, 22);
        do LevelManager.updateMap(46, 24);
        do LevelManager.updateMapBulk(44, 52, 6, true);
        do LevelManager.updateMap(44, 4);
        do LevelManager.updateMap(46, 8);
        do LevelManager.updateMapBulk(8, 14, 52, false);
        do LevelManager.updateMap(50, 12);
        do LevelManager.updateMapBulk(54, 58, 12, true);
        do LevelManager.updateMapBulk(14, 18, 58, false);
        do LevelManager.updateMapBulk(58, 62, 20, true);
        do LevelManager.updateMap(56, 16);
        return;
    }
}