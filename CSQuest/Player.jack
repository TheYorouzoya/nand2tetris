/* Player Character */
class Player {
    /* x and y refer to the player's position on the screen according to the grid
       as explained in the LevelManager */
    field int x, y;
    
    /* the current hit points of the player character */
    field int hp;

    /* the spawn location for the currently active level. When respawned, this is
       the position the player character returns to */
    field int spawnX, spawnY;

    /* bit masks with the first and last 8 bits set to 1. To be used while drawing
       the character on the screen */
    field int oddMask, evenMask;

    /* used to hold the location of the player in the screen memory map on the host
       RAM */
    field int location;

    /* used for a pointer trick to directly read/write into the screen memory map
       without calling OS subroutines */
    field Array screen; 
    
    /* twoToThe is the reference to the array used for bitwise operations as mentioned
       in the Game engine */
    field Array twoToThe;
    
    /* spatial hash map reference provided by the Levelmanager to use while moving
       the character across the screen */
    field Array map;
    
    /* to hold whether the player is alive or not */
    field boolean alive;

    constructor Player new(int Ax, int Ay, Array powArr, Array lMap) {
        let x = Ax;
        let y = Ay;
        let twoToThe = powArr;
        let map = lMap;
        let screen = 16384;     // screen memory starts at RAM location 16384
        let oddMask = -256;     // bits 8-15 set to 1
        let evenMask = 255;     // bits 0-7 set to 1
        let alive = true;
        let hp = 2;             // starting HP is 2

        return this;
    }

    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    // player takes 1 point of damage; the number of hearts in the UI box
    // is updated
    method void takeDamage() {
        let hp = hp - 1;
        if (hp = 0) {
            let alive = false;
        }
        do DialogueManager.updateStatusBox(hp);
        return;
    }

    // player heals 1 point of health; max health is capped at 3; updates dialogue
    // box UI accordingly
    method void heal() {
        let hp = hp + 1;
        if (hp > 3) {
            let hp = 3;
        }
        do DialogueManager.updateStatusBox(hp);
        return;
    }

    // set a respawn location for the player character
    method void setSpawn(int xPos, int yPos) {
        let spawnX = xPos;
        let spawnY = yPos;
        return;
    }

    // move the player to the respawn location
    method void respawn() {
        do erase();
        do setPosition(spawnX, spawnY);
        do draw();
        return;
    }

    method boolean isAlive() {
        return alive;
    }

    method int getX() {
        return x;
    }

    method int getY() {
        return y;
    }

    method int getHP() {
        return hp;
    }

    // move the player to a particular (x, y) location on the screen
    method void setPosition(int Ax, int Ay) {
        let x = Ax;
        let y = Ay;
        return;
    }

    // draw the player character directly into the screen memory map
    method void draw() {
        let location = (x / 2) + (y * 256);     // compute RAM location offset

        if ((x & 1) = 1) {  // player model crosses word boundary
            // print first half
            let screen[location] = screen[location] & (-1);
            let screen[location + 32] = screen[location + 32] & (2047);
            let screen[location + 64] = screen[location + 64] & (1023);
            let screen[location + 96] = screen[location + 96] & (511);
            let screen[location + 128] = screen[location + 128] & (-7681);
            let screen[location + 160] = screen[location + 160] & (4607);
            let screen[location + 192] = screen[location + 192] & (23039);
            let screen[location + 224] = screen[location + 224] & (23039);
            let screen[location + 256] = screen[location + 256] & (5119);
            let screen[location + 288] = screen[location + 288] & (-1);
            let screen[location + 320] = screen[location + 320] & (20479);
            let screen[location + 352] = screen[location + 352] & (-14337);
            let screen[location + 384] = screen[location + 384] & (10239);
            let screen[location + 416] = screen[location + 416] & (8191);
            let screen[location + 448] = screen[location + 448] & (-8193);
            let screen[location + 480] = screen[location + 480] & (-1);

            // print second half
            let screen[location + 1] = screen[location + 1] & (-1);
            let screen[location + 33] = screen[location + 33] & (-32);
            let screen[location + 65] = screen[location + 65] & (-64);
            let screen[location + 97] = screen[location + 97] & (-128);
            let screen[location + 129] = screen[location + 129] & (-121);
            let screen[location + 161] = screen[location + 161] & (-120);
            let screen[location + 193] = screen[location + 193] & (-102);
            let screen[location + 225] = screen[location + 225] & (-102);
            let screen[location + 257] = screen[location + 257] & (-56);
            let screen[location + 289] = screen[location + 289] & (-1);
            let screen[location + 321] = screen[location + 321] & (-14);
            let screen[location + 353] = screen[location + 353] & (-29);
            let screen[location + 385] = screen[location + 385] & (-28);
            let screen[location + 417] = screen[location + 417] & (-8);
            let screen[location + 449] = screen[location + 449] & (-5);
            let screen[location + 481] = screen[location + 481] & (-1);
        } else {
            let screen[location] = -1;
            let screen[location + 32] = -8185;
            let screen[location + 64] = -16381;
            let screen[location + 96] = -32767;
            let screen[location + 128] = -30751;
            let screen[location + 160] = -30703;
            let screen[location + 192] = -26023;
            let screen[location + 224] = -26023;
            let screen[location + 256] = -14317;
            let screen[location + 288] = -1;
            let screen[location + 320] = -3505;
            let screen[location + 352] = -7225;
            let screen[location + 384] = -7129;
            let screen[location + 416] = -2017;
            let screen[location + 448] = -1633;
            let screen[location + 480] = -1;
        }
        
        return;
    }

    // erase the player character from the screen
    method void erase() {
        var int i, row;
        if ((x & 1) = 1) {  // player crosses word boundary
            let i = 0;
            let row = 0;

            while (i < 16) {
                // preserve the half-word on either while erasing by OR'ing with the
                // masks
                let screen[location + row] = screen[location + row] | oddMask;
                let screen[location + row + 1] = screen[location + row + 1] | evenMask;
                let i = i + 1;
                let row = row + 32;
            }
        }
        else {
            let i = 0;
            let row = 0;
            while (i < 16) {
                let screen[location + row] = -1;
                let i = i + 1;
                let row = row + 32;
            }
        }
        return;
    }

    method void moveUp() {
        if ((y > 0) & (validatePosition(x, y - 1))) {
            do erase();
            let y = y - 1;
            do draw();
        }
        return;
    }
    
    method void moveDown() {
        if ((y < 24) & (validatePosition(x, y + 1))) {
            do erase();
            let y = y + 1;
            do draw();
        }
        return;
    }

    method void moveLeft() {
        if ((x > 0) & (validatePosition(x - 1, y))) {
            do erase();
            let x = x - 1;
            do draw();
        }
        return;
    }

    method void moveRight() {
        if ((x < 62) & (validatePosition(x + 1, y))) {
            do erase();
            let x = x + 1;
            do draw();
        }
        return;
    }

    // validates a given (x, y) coordinate against the spatial hash map generated
    // by the current level. Returns true if the player can move into the given
    // spot, false otherwise
    method boolean validatePosition(int x, int y) {
        var int index, bit, quot;
        var boolean result;
        let quot = x / 16;
        let bit = x - (quot * 16);
        let index = quot + (y * 4);

        let result = ((map[index] & twoToThe[bit]) = 0);
        return result;
    }
}