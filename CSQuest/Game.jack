/* Game engine */
class Game {
    field Player player;
    field int direction, slowBit, itemCount;
    field Array twoToThe, items;

    constructor Game new() {
        // Array passed around for use in bitwise operations. For a position "i"
        // in the array, the i'th bit of the 16-bit integer is set to 1.
        let twoToThe = Array.new(16);
        let twoToThe[0] = 1;
        let twoToThe[1] = 2;
        let twoToThe[2] = 4;
        let twoToThe[3] = 8;
        let twoToThe[4] = 16;
        let twoToThe[5] = 32;
        let twoToThe[6] = 64;
        let twoToThe[7] = 128;
        let twoToThe[8] = 256;
        let twoToThe[9] = 512;
        let twoToThe[10] = 1024;
        let twoToThe[11] = 2048;
        let twoToThe[12] = 4096;
        let twoToThe[13] = 8192;
        let twoToThe[14] = 16384;
        let twoToThe[15] = 32767 + 1;   // overflows to -32768
        
        // Slowbit used in cases where items need to be updated every other tick
        // of the game engine
        let slowBit = 0;

        // Initlialize other classes
        do Tiles.init();
        do LevelManager.init(0, twoToThe);
        do DialogueManager.init();
        let player = Player.new(0, 0, twoToThe, LevelManager.getMap());
        let direction = 0;
        do LevelManager.setPlayer(player);
        let items = LevelManager.getItems();

        return this;
    }

    // dispose of the current game object and respective classes
    method void dispose() {
        do player.dispose();
        do LevelManager.dispose();
        do twoToThe.dispose();
        do Memory.deAlloc(this);
        return;
    }

    /*
    The main game engine loop. Each invocation of the loop is considered a "tick".
    On each tick, the engine performs the following operations:
        - Detect the currently pressed key on the keyboard
        - Move the player character (no movement if no movement keys are pressed)
        - On every other tick, move any items (in the current level) that have pathing 
          specified for them
        - Animate items in the current level by advancing them to the next animation
          frame
        - Animate any static objects in the current level (like fans, gears, etc.)
        - Detect any player x item collisions and process them accordingly
        - Process keyboard events in the current level (e.g., player activating
          a switch)
        - Check if the current level is cleared. If so, load the next level
        - Flip the slow bit
        - Detect if the player is alive
        - Detect if the player has finished the game
    There is a 100ms delay (a Sys.wait(100) call) between each tick so that key presses
    and player movement are more fluid and not "instantaneous"

    Once the player dies or finishes the game, we exit out of the tick loop and
    display a proper text window to the player.
    */
    method void run() {
        var char key;
        var boolean exit;

        let exit = false;

        do blackScreen(true);
        do LevelManager.loadWelcomeScreen();

        let itemCount = LevelManager.getItemCount();    
        do player.draw();

        while (~exit) {
            let key = Keyboard.keyPressed();
            let direction = 0;
            if (key = 131) { let direction = 1; }   // up arrow
            if (key = 133) { let direction = 2; }   // down arrow
            if (key = 130) { let direction = 3; }   // left arrow
            if (key = 132) { let direction = 4; }   // right arrow
            do movePlayer();
            if (slowBit = 0) {
                do moveItems();
            }
            do animateItems();
            do LevelManager.animateTiles();
            do detectCollisions(player.getX(), player.getY());
            do LevelManager.processEvents(key);
            if (LevelManager.winCondition()) {      // if current level is cleared
                do blackScreen(false);              // clear the screen
                do LevelManager.loadNextLevel();    
                //  get the moving/interactable items from the new level
                let itemCount = LevelManager.getItemCount();
                do player.draw();
            }
            do Sys.wait(100);
            let slowBit = ~slowBit;
            if (~player.isAlive()) {
                let exit = true;
            }
            if (LevelManager.gameOver()) {
                let exit = true;
            }
        }

        // if player died and game is over
        if (~player.isAlive()) {
            do player.erase();
            do Sys.wait(1500);
            do blackScreen(true);
            do DialogueManager.drawEndScreen();
            do Output.moveCursor(9, 27);
            do Output.printString("Game Over.");
            do Output.moveCursor(11, 11);
            do Output.printString("Press the back button [<<] on the emulator");
            do Output.moveCursor(12, 23);
            do Output.printString("and restart the game.");
        }

        // if player finished the game
        if (LevelManager.gameOver()) {
            do DialogueManager.drawEndScreen();
            do Output.moveCursor(7, 28);
            do Output.printString("The end.");
            do Output.moveCursor(10, 11);
            do Output.printString("Congratulations! You have finished CSQuest");
            do Output.moveCursor(11, 11);
            do Output.printString("Credit to PiiiXL and Kenney on Itch.io for");
            do Output.moveCursor(12, 19);
            do Output.printString("making the pixel-art assets.");
            do Output.moveCursor(15, 22);
            do Output.printString("Thank you for playing!");
        }
        return;
    }

    method void movePlayer() {
        if (direction = 1) { do player.moveUp(); }
        if (direction = 2) { do player.moveDown(); }
        if (direction = 3) { do player.moveLeft(); }
        if (direction = 4) { do player.moveRight(); }
        return;
    }

    method void moveItems() {
        var int i;
        var Item item;

        let i = 0;
        while (i < itemCount) {
            let item = items[i];
            do item.moveItem();
            let i = i + 1;
        }
        return;
    }

    method void animateItems() {
        var int i;
        var Item item;

        let i = 0;
        while (i < itemCount) {
            let item = items[i];
            if (item.isAnimated()) {
                do item.draw();
            }
            let i = i + 1;
        }
        return;
    }

    // detect any collisions with other items in the level
    method void detectCollisions(int x, int y) {
        var int i, type;
        var Item item;

        let i = 0;
        while (i < itemCount) {
            let item = items[i];
            if(item.collidesWith(x, y)) { // if item collides with player
                let type = item.getType();
                do processCollision(item, type);
                if (~(type = 3)) {  // if item type is 3
                    do item.dispose();
                    let items[i] = items[itemCount - 1];
                    let itemCount = itemCount - 1;
                }
            }
            let i = i + 1;
        }
        return;
    }

    method void processCollision(Item item, int typ) {
        do Tiles.eraseTile(item.getX(), item.getY());
        do player.draw();
        if (typ = 1) {
            do LevelManager.processKeyCollision(item);
        }
        if ((typ = 3) & (item.isActive())) {
            do player.takeDamage();
            do player.respawn();
        }
        if (typ = 2) {
            do player.heal();
        }
        return;
    }

    // turns the screen black partly/fully depending on the argument passed
    method void blackScreen(boolean full) {
        var Array screen;
        var int index;
        var int end;

        let screen = 16384;
        let index = 0;
        let end = 6656;

        if (full) {
            let end = 8192;
        }

        while (index < end) {
            let screen[index] = -1;
            let index = index + 1;
        }
        return;
    }

}