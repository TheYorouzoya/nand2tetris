// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field int length, currentLength;
    field Array str;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        let length = maxLength;
        if (maxLength > 0) {
            let str = Array.new(length);
        }
        let currentLength = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if (length > 0) {
            do Memory.deAlloc(str);
        }
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return currentLength;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if ((j < 0) | (j > currentLength)) {
            return -1;
        }
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if ((j < 0) | (j > currentLength)) {
            return;
        }
        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (length < currentLength) {
            return this;
        }
        let str[currentLength] = c;
        let currentLength = currentLength + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (currentLength = 0) {
            return;
        }
        let currentLength = currentLength - 1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int i, val;
        var boolean negFlag;
        let i = 0;
        let negFlag = false;
        let val = 0;

        if(str[0] = 45) {
            let negFlag = true;
            let i = i + 1;
        }

        while (i < currentLength) {
            if ((str[i] < 48) | (str[i] > 57)) {
                if (negFlag) {
                    return -val;
                }
                return val;
            }
            let val = (val * 10) + (str[i] - 48);
            let i = i + 1;
        }
        if(negFlag) {
            return -val;
        }
        return val;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int i, j, digit, num;
        var boolean flag;

        let i = 0;
        let flag = false;
        let num = val;
        let j = 10000;
        let currentLength = 0;

        if (num < 0) {
            let str[i] = 45;
            let i = i + 1;
            let num = -num;
            let currentLength = currentLength + 1;
        }

        while (j > 9) {
            if (num > j) {
                let digit = num / j;
                let str[i] = digit + 48;
                let num = num - (j * digit);
                let i = i + 1;
                let flag = true;
                let currentLength = currentLength + 1;
            }
            else {
                if (flag) {
                    let str[i] = 48;
                    let i = i + 1;
                    let currentLength = currentLength + 1;
                }
            }
            let j = j / 10;
        }
        let str[i] = num + 48;
        let currentLength = currentLength + 1;
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
